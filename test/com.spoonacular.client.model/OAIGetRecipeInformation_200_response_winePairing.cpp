/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRecipeInformation_200_response_winePairing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRecipeInformation_200_response_winePairing::OAIGetRecipeInformation_200_response_winePairing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRecipeInformation_200_response_winePairing::OAIGetRecipeInformation_200_response_winePairing() {
    this->initializeModel();
}

OAIGetRecipeInformation_200_response_winePairing::~OAIGetRecipeInformation_200_response_winePairing() {}

void OAIGetRecipeInformation_200_response_winePairing::initializeModel() {

    m_paired_wines_isSet = false;
    m_paired_wines_isValid = false;

    m_pairing_text_isSet = false;
    m_pairing_text_isValid = false;

    m_product_matches_isSet = false;
    m_product_matches_isValid = false;
}

void OAIGetRecipeInformation_200_response_winePairing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRecipeInformation_200_response_winePairing::fromJsonObject(QJsonObject json) {

    m_paired_wines_isValid = ::OpenAPI::fromJsonValue(paired_wines, json[QString("pairedWines")]);
    m_paired_wines_isSet = !json[QString("pairedWines")].isNull() && m_paired_wines_isValid;

    m_pairing_text_isValid = ::OpenAPI::fromJsonValue(pairing_text, json[QString("pairingText")]);
    m_pairing_text_isSet = !json[QString("pairingText")].isNull() && m_pairing_text_isValid;

    m_product_matches_isValid = ::OpenAPI::fromJsonValue(product_matches, json[QString("productMatches")]);
    m_product_matches_isSet = !json[QString("productMatches")].isNull() && m_product_matches_isValid;
}

QString OAIGetRecipeInformation_200_response_winePairing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRecipeInformation_200_response_winePairing::asJsonObject() const {
    QJsonObject obj;
    if (paired_wines.size() > 0) {
        obj.insert(QString("pairedWines"), ::OpenAPI::toJsonValue(paired_wines));
    }
    if (m_pairing_text_isSet) {
        obj.insert(QString("pairingText"), ::OpenAPI::toJsonValue(pairing_text));
    }
    if (product_matches.size() > 0) {
        obj.insert(QString("productMatches"), ::OpenAPI::toJsonValue(product_matches));
    }
    return obj;
}

QList<QString> OAIGetRecipeInformation_200_response_winePairing::getPairedWines() const {
    return paired_wines;
}
void OAIGetRecipeInformation_200_response_winePairing::setPairedWines(const QList<QString> &paired_wines) {
    this->paired_wines = paired_wines;
    this->m_paired_wines_isSet = true;
}

bool OAIGetRecipeInformation_200_response_winePairing::is_paired_wines_Set() const{
    return m_paired_wines_isSet;
}

bool OAIGetRecipeInformation_200_response_winePairing::is_paired_wines_Valid() const{
    return m_paired_wines_isValid;
}

QString OAIGetRecipeInformation_200_response_winePairing::getPairingText() const {
    return pairing_text;
}
void OAIGetRecipeInformation_200_response_winePairing::setPairingText(const QString &pairing_text) {
    this->pairing_text = pairing_text;
    this->m_pairing_text_isSet = true;
}

bool OAIGetRecipeInformation_200_response_winePairing::is_pairing_text_Set() const{
    return m_pairing_text_isSet;
}

bool OAIGetRecipeInformation_200_response_winePairing::is_pairing_text_Valid() const{
    return m_pairing_text_isValid;
}

QSet<OAIGetRecipeInformation_200_response_winePairing_productMatches_inner> OAIGetRecipeInformation_200_response_winePairing::getProductMatches() const {
    return product_matches;
}
void OAIGetRecipeInformation_200_response_winePairing::setProductMatches(const QSet<OAIGetRecipeInformation_200_response_winePairing_productMatches_inner> &product_matches) {
    this->product_matches = product_matches;
    this->m_product_matches_isSet = true;
}

bool OAIGetRecipeInformation_200_response_winePairing::is_product_matches_Set() const{
    return m_product_matches_isSet;
}

bool OAIGetRecipeInformation_200_response_winePairing::is_product_matches_Valid() const{
    return m_product_matches_isValid;
}

bool OAIGetRecipeInformation_200_response_winePairing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (paired_wines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pairing_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (product_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRecipeInformation_200_response_winePairing::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_paired_wines_isValid && m_pairing_text_isValid && m_product_matches_isValid && true;
}

} // namespace OpenAPI
