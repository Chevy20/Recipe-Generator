/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSimilarRecipes_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSimilarRecipes_200_response_inner::OAIGetSimilarRecipes_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSimilarRecipes_200_response_inner::OAIGetSimilarRecipes_200_response_inner() {
    this->initializeModel();
}

OAIGetSimilarRecipes_200_response_inner::~OAIGetSimilarRecipes_200_response_inner() {}

void OAIGetSimilarRecipes_200_response_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_ready_in_minutes_isSet = false;
    m_ready_in_minutes_isValid = false;

    m_servings_isSet = false;
    m_servings_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;
}

void OAIGetSimilarRecipes_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSimilarRecipes_200_response_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_ready_in_minutes_isValid = ::OpenAPI::fromJsonValue(ready_in_minutes, json[QString("readyInMinutes")]);
    m_ready_in_minutes_isSet = !json[QString("readyInMinutes")].isNull() && m_ready_in_minutes_isValid;

    m_servings_isValid = ::OpenAPI::fromJsonValue(servings, json[QString("servings")]);
    m_servings_isSet = !json[QString("servings")].isNull() && m_servings_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(source_url, json[QString("sourceUrl")]);
    m_source_url_isSet = !json[QString("sourceUrl")].isNull() && m_source_url_isValid;
}

QString OAIGetSimilarRecipes_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSimilarRecipes_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(title));
    }
    if (m_image_type_isSet) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(image_type));
    }
    if (m_ready_in_minutes_isSet) {
        obj.insert(QString("readyInMinutes"), ::OpenAPI::toJsonValue(ready_in_minutes));
    }
    if (m_servings_isSet) {
        obj.insert(QString("servings"), ::OpenAPI::toJsonValue(servings));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("sourceUrl"), ::OpenAPI::toJsonValue(source_url));
    }
    return obj;
}

qint32 OAIGetSimilarRecipes_200_response_inner::getId() const {
    return id;
}
void OAIGetSimilarRecipes_200_response_inner::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIGetSimilarRecipes_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetSimilarRecipes_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetSimilarRecipes_200_response_inner::getTitle() const {
    return title;
}
void OAIGetSimilarRecipes_200_response_inner::setTitle(const QString &title) {
    this->title = title;
    this->m_title_isSet = true;
}

bool OAIGetSimilarRecipes_200_response_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGetSimilarRecipes_200_response_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGetSimilarRecipes_200_response_inner::getImageType() const {
    return image_type;
}
void OAIGetSimilarRecipes_200_response_inner::setImageType(const QString &image_type) {
    this->image_type = image_type;
    this->m_image_type_isSet = true;
}

bool OAIGetSimilarRecipes_200_response_inner::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAIGetSimilarRecipes_200_response_inner::is_image_type_Valid() const{
    return m_image_type_isValid;
}

qint32 OAIGetSimilarRecipes_200_response_inner::getReadyInMinutes() const {
    return ready_in_minutes;
}
void OAIGetSimilarRecipes_200_response_inner::setReadyInMinutes(const qint32 &ready_in_minutes) {
    this->ready_in_minutes = ready_in_minutes;
    this->m_ready_in_minutes_isSet = true;
}

bool OAIGetSimilarRecipes_200_response_inner::is_ready_in_minutes_Set() const{
    return m_ready_in_minutes_isSet;
}

bool OAIGetSimilarRecipes_200_response_inner::is_ready_in_minutes_Valid() const{
    return m_ready_in_minutes_isValid;
}

double OAIGetSimilarRecipes_200_response_inner::getServings() const {
    return servings;
}
void OAIGetSimilarRecipes_200_response_inner::setServings(const double &servings) {
    this->servings = servings;
    this->m_servings_isSet = true;
}

bool OAIGetSimilarRecipes_200_response_inner::is_servings_Set() const{
    return m_servings_isSet;
}

bool OAIGetSimilarRecipes_200_response_inner::is_servings_Valid() const{
    return m_servings_isValid;
}

QString OAIGetSimilarRecipes_200_response_inner::getSourceUrl() const {
    return source_url;
}
void OAIGetSimilarRecipes_200_response_inner::setSourceUrl(const QString &source_url) {
    this->source_url = source_url;
    this->m_source_url_isSet = true;
}

bool OAIGetSimilarRecipes_200_response_inner::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIGetSimilarRecipes_200_response_inner::is_source_url_Valid() const{
    return m_source_url_isValid;
}

bool OAIGetSimilarRecipes_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ready_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_servings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSimilarRecipes_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_title_isValid && m_image_type_isValid && m_ready_in_minutes_isValid && m_servings_isValid && m_source_url_isValid && true;
}

} // namespace OpenAPI
