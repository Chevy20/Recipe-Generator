/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRandomRecipes_200_response_recipes_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRandomRecipes_200_response_recipes_inner::OAIGetRandomRecipes_200_response_recipes_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRandomRecipes_200_response_recipes_inner::OAIGetRandomRecipes_200_response_recipes_inner() {
    this->initializeModel();
}

OAIGetRandomRecipes_200_response_recipes_inner::~OAIGetRandomRecipes_200_response_recipes_inner() {}

void OAIGetRandomRecipes_200_response_recipes_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_servings_isSet = false;
    m_servings_isValid = false;

    m_ready_in_minutes_isSet = false;
    m_ready_in_minutes_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_source_name_isSet = false;
    m_source_name_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_spoonacular_source_url_isSet = false;
    m_spoonacular_source_url_isValid = false;

    m_aggregate_likes_isSet = false;
    m_aggregate_likes_isValid = false;

    m_health_score_isSet = false;
    m_health_score_isValid = false;

    m_spoonacular_score_isSet = false;
    m_spoonacular_score_isValid = false;

    m_price_per_serving_isSet = false;
    m_price_per_serving_isValid = false;

    m_analyzed_instructions_isSet = false;
    m_analyzed_instructions_isValid = false;

    m_cheap_isSet = false;
    m_cheap_isValid = false;

    m_credits_text_isSet = false;
    m_credits_text_isValid = false;

    m_cuisines_isSet = false;
    m_cuisines_isValid = false;

    m_dairy_free_isSet = false;
    m_dairy_free_isValid = false;

    m_diets_isSet = false;
    m_diets_isValid = false;

    m_gaps_isSet = false;
    m_gaps_isValid = false;

    m_gluten_free_isSet = false;
    m_gluten_free_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_ketogenic_isSet = false;
    m_ketogenic_isValid = false;

    m_low_fodmap_isSet = false;
    m_low_fodmap_isValid = false;

    m_occasions_isSet = false;
    m_occasions_isValid = false;

    m_sustainable_isSet = false;
    m_sustainable_isValid = false;

    m_vegan_isSet = false;
    m_vegan_isValid = false;

    m_vegetarian_isSet = false;
    m_vegetarian_isValid = false;

    m_very_healthy_isSet = false;
    m_very_healthy_isValid = false;

    m_very_popular_isSet = false;
    m_very_popular_isValid = false;

    m_whole30_isSet = false;
    m_whole30_isValid = false;

    m_weight_watcher_smart_points_isSet = false;
    m_weight_watcher_smart_points_isValid = false;

    m_dish_types_isSet = false;
    m_dish_types_isValid = false;

    m_extended_ingredients_isSet = false;
    m_extended_ingredients_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_wine_pairing_isSet = false;
    m_wine_pairing_isValid = false;
}

void OAIGetRandomRecipes_200_response_recipes_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRandomRecipes_200_response_recipes_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_servings_isValid = ::OpenAPI::fromJsonValue(servings, json[QString("servings")]);
    m_servings_isSet = !json[QString("servings")].isNull() && m_servings_isValid;

    m_ready_in_minutes_isValid = ::OpenAPI::fromJsonValue(ready_in_minutes, json[QString("readyInMinutes")]);
    m_ready_in_minutes_isSet = !json[QString("readyInMinutes")].isNull() && m_ready_in_minutes_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_source_name_isValid = ::OpenAPI::fromJsonValue(source_name, json[QString("sourceName")]);
    m_source_name_isSet = !json[QString("sourceName")].isNull() && m_source_name_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(source_url, json[QString("sourceUrl")]);
    m_source_url_isSet = !json[QString("sourceUrl")].isNull() && m_source_url_isValid;

    m_spoonacular_source_url_isValid = ::OpenAPI::fromJsonValue(spoonacular_source_url, json[QString("spoonacularSourceUrl")]);
    m_spoonacular_source_url_isSet = !json[QString("spoonacularSourceUrl")].isNull() && m_spoonacular_source_url_isValid;

    m_aggregate_likes_isValid = ::OpenAPI::fromJsonValue(aggregate_likes, json[QString("aggregateLikes")]);
    m_aggregate_likes_isSet = !json[QString("aggregateLikes")].isNull() && m_aggregate_likes_isValid;

    m_health_score_isValid = ::OpenAPI::fromJsonValue(health_score, json[QString("healthScore")]);
    m_health_score_isSet = !json[QString("healthScore")].isNull() && m_health_score_isValid;

    m_spoonacular_score_isValid = ::OpenAPI::fromJsonValue(spoonacular_score, json[QString("spoonacularScore")]);
    m_spoonacular_score_isSet = !json[QString("spoonacularScore")].isNull() && m_spoonacular_score_isValid;

    m_price_per_serving_isValid = ::OpenAPI::fromJsonValue(price_per_serving, json[QString("pricePerServing")]);
    m_price_per_serving_isSet = !json[QString("pricePerServing")].isNull() && m_price_per_serving_isValid;

    m_analyzed_instructions_isValid = ::OpenAPI::fromJsonValue(analyzed_instructions, json[QString("analyzedInstructions")]);
    m_analyzed_instructions_isSet = !json[QString("analyzedInstructions")].isNull() && m_analyzed_instructions_isValid;

    m_cheap_isValid = ::OpenAPI::fromJsonValue(cheap, json[QString("cheap")]);
    m_cheap_isSet = !json[QString("cheap")].isNull() && m_cheap_isValid;

    m_credits_text_isValid = ::OpenAPI::fromJsonValue(credits_text, json[QString("creditsText")]);
    m_credits_text_isSet = !json[QString("creditsText")].isNull() && m_credits_text_isValid;

    m_cuisines_isValid = ::OpenAPI::fromJsonValue(cuisines, json[QString("cuisines")]);
    m_cuisines_isSet = !json[QString("cuisines")].isNull() && m_cuisines_isValid;

    m_dairy_free_isValid = ::OpenAPI::fromJsonValue(dairy_free, json[QString("dairyFree")]);
    m_dairy_free_isSet = !json[QString("dairyFree")].isNull() && m_dairy_free_isValid;

    m_diets_isValid = ::OpenAPI::fromJsonValue(diets, json[QString("diets")]);
    m_diets_isSet = !json[QString("diets")].isNull() && m_diets_isValid;

    m_gaps_isValid = ::OpenAPI::fromJsonValue(gaps, json[QString("gaps")]);
    m_gaps_isSet = !json[QString("gaps")].isNull() && m_gaps_isValid;

    m_gluten_free_isValid = ::OpenAPI::fromJsonValue(gluten_free, json[QString("glutenFree")]);
    m_gluten_free_isSet = !json[QString("glutenFree")].isNull() && m_gluten_free_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;

    m_ketogenic_isValid = ::OpenAPI::fromJsonValue(ketogenic, json[QString("ketogenic")]);
    m_ketogenic_isSet = !json[QString("ketogenic")].isNull() && m_ketogenic_isValid;

    m_low_fodmap_isValid = ::OpenAPI::fromJsonValue(low_fodmap, json[QString("lowFodmap")]);
    m_low_fodmap_isSet = !json[QString("lowFodmap")].isNull() && m_low_fodmap_isValid;

    m_occasions_isValid = ::OpenAPI::fromJsonValue(occasions, json[QString("occasions")]);
    m_occasions_isSet = !json[QString("occasions")].isNull() && m_occasions_isValid;

    m_sustainable_isValid = ::OpenAPI::fromJsonValue(sustainable, json[QString("sustainable")]);
    m_sustainable_isSet = !json[QString("sustainable")].isNull() && m_sustainable_isValid;

    m_vegan_isValid = ::OpenAPI::fromJsonValue(vegan, json[QString("vegan")]);
    m_vegan_isSet = !json[QString("vegan")].isNull() && m_vegan_isValid;

    m_vegetarian_isValid = ::OpenAPI::fromJsonValue(vegetarian, json[QString("vegetarian")]);
    m_vegetarian_isSet = !json[QString("vegetarian")].isNull() && m_vegetarian_isValid;

    m_very_healthy_isValid = ::OpenAPI::fromJsonValue(very_healthy, json[QString("veryHealthy")]);
    m_very_healthy_isSet = !json[QString("veryHealthy")].isNull() && m_very_healthy_isValid;

    m_very_popular_isValid = ::OpenAPI::fromJsonValue(very_popular, json[QString("veryPopular")]);
    m_very_popular_isSet = !json[QString("veryPopular")].isNull() && m_very_popular_isValid;

    m_whole30_isValid = ::OpenAPI::fromJsonValue(whole30, json[QString("whole30")]);
    m_whole30_isSet = !json[QString("whole30")].isNull() && m_whole30_isValid;

    m_weight_watcher_smart_points_isValid = ::OpenAPI::fromJsonValue(weight_watcher_smart_points, json[QString("weightWatcherSmartPoints")]);
    m_weight_watcher_smart_points_isSet = !json[QString("weightWatcherSmartPoints")].isNull() && m_weight_watcher_smart_points_isValid;

    m_dish_types_isValid = ::OpenAPI::fromJsonValue(dish_types, json[QString("dishTypes")]);
    m_dish_types_isSet = !json[QString("dishTypes")].isNull() && m_dish_types_isValid;

    m_extended_ingredients_isValid = ::OpenAPI::fromJsonValue(extended_ingredients, json[QString("extendedIngredients")]);
    m_extended_ingredients_isSet = !json[QString("extendedIngredients")].isNull() && m_extended_ingredients_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_wine_pairing_isValid = ::OpenAPI::fromJsonValue(wine_pairing, json[QString("winePairing")]);
    m_wine_pairing_isSet = !json[QString("winePairing")].isNull() && m_wine_pairing_isValid;
}

QString OAIGetRandomRecipes_200_response_recipes_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRandomRecipes_200_response_recipes_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(title));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(image));
    }
    if (m_image_type_isSet) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(image_type));
    }
    if (m_servings_isSet) {
        obj.insert(QString("servings"), ::OpenAPI::toJsonValue(servings));
    }
    if (m_ready_in_minutes_isSet) {
        obj.insert(QString("readyInMinutes"), ::OpenAPI::toJsonValue(ready_in_minutes));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(license));
    }
    if (m_source_name_isSet) {
        obj.insert(QString("sourceName"), ::OpenAPI::toJsonValue(source_name));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("sourceUrl"), ::OpenAPI::toJsonValue(source_url));
    }
    if (m_spoonacular_source_url_isSet) {
        obj.insert(QString("spoonacularSourceUrl"), ::OpenAPI::toJsonValue(spoonacular_source_url));
    }
    if (m_aggregate_likes_isSet) {
        obj.insert(QString("aggregateLikes"), ::OpenAPI::toJsonValue(aggregate_likes));
    }
    if (m_health_score_isSet) {
        obj.insert(QString("healthScore"), ::OpenAPI::toJsonValue(health_score));
    }
    if (m_spoonacular_score_isSet) {
        obj.insert(QString("spoonacularScore"), ::OpenAPI::toJsonValue(spoonacular_score));
    }
    if (m_price_per_serving_isSet) {
        obj.insert(QString("pricePerServing"), ::OpenAPI::toJsonValue(price_per_serving));
    }
    if (analyzed_instructions.size() > 0) {
        obj.insert(QString("analyzedInstructions"), ::OpenAPI::toJsonValue(analyzed_instructions));
    }
    if (m_cheap_isSet) {
        obj.insert(QString("cheap"), ::OpenAPI::toJsonValue(cheap));
    }
    if (m_credits_text_isSet) {
        obj.insert(QString("creditsText"), ::OpenAPI::toJsonValue(credits_text));
    }
    if (cuisines.size() > 0) {
        obj.insert(QString("cuisines"), ::OpenAPI::toJsonValue(cuisines));
    }
    if (m_dairy_free_isSet) {
        obj.insert(QString("dairyFree"), ::OpenAPI::toJsonValue(dairy_free));
    }
    if (diets.size() > 0) {
        obj.insert(QString("diets"), ::OpenAPI::toJsonValue(diets));
    }
    if (m_gaps_isSet) {
        obj.insert(QString("gaps"), ::OpenAPI::toJsonValue(gaps));
    }
    if (m_gluten_free_isSet) {
        obj.insert(QString("glutenFree"), ::OpenAPI::toJsonValue(gluten_free));
    }
    if (m_instructions_isSet) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(instructions));
    }
    if (m_ketogenic_isSet) {
        obj.insert(QString("ketogenic"), ::OpenAPI::toJsonValue(ketogenic));
    }
    if (m_low_fodmap_isSet) {
        obj.insert(QString("lowFodmap"), ::OpenAPI::toJsonValue(low_fodmap));
    }
    if (occasions.size() > 0) {
        obj.insert(QString("occasions"), ::OpenAPI::toJsonValue(occasions));
    }
    if (m_sustainable_isSet) {
        obj.insert(QString("sustainable"), ::OpenAPI::toJsonValue(sustainable));
    }
    if (m_vegan_isSet) {
        obj.insert(QString("vegan"), ::OpenAPI::toJsonValue(vegan));
    }
    if (m_vegetarian_isSet) {
        obj.insert(QString("vegetarian"), ::OpenAPI::toJsonValue(vegetarian));
    }
    if (m_very_healthy_isSet) {
        obj.insert(QString("veryHealthy"), ::OpenAPI::toJsonValue(very_healthy));
    }
    if (m_very_popular_isSet) {
        obj.insert(QString("veryPopular"), ::OpenAPI::toJsonValue(very_popular));
    }
    if (m_whole30_isSet) {
        obj.insert(QString("whole30"), ::OpenAPI::toJsonValue(whole30));
    }
    if (m_weight_watcher_smart_points_isSet) {
        obj.insert(QString("weightWatcherSmartPoints"), ::OpenAPI::toJsonValue(weight_watcher_smart_points));
    }
    if (dish_types.size() > 0) {
        obj.insert(QString("dishTypes"), ::OpenAPI::toJsonValue(dish_types));
    }
    if (extended_ingredients.size() > 0) {
        obj.insert(QString("extendedIngredients"), ::OpenAPI::toJsonValue(extended_ingredients));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(summary));
    }
    if (wine_pairing.isSet()) {
        obj.insert(QString("winePairing"), ::OpenAPI::toJsonValue(wine_pairing));
    }
    return obj;
}

qint32 OAIGetRandomRecipes_200_response_recipes_inner::getId() const {
    return id;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetRandomRecipes_200_response_recipes_inner::getTitle() const {
    return title;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setTitle(const QString &title) {
    this->title = title;
    this->m_title_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGetRandomRecipes_200_response_recipes_inner::getImage() const {
    return image;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setImage(const QString &image) {
    this->image = image;
    this->m_image_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_image_Set() const{
    return m_image_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIGetRandomRecipes_200_response_recipes_inner::getImageType() const {
    return image_type;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setImageType(const QString &image_type) {
    this->image_type = image_type;
    this->m_image_type_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_image_type_Valid() const{
    return m_image_type_isValid;
}

double OAIGetRandomRecipes_200_response_recipes_inner::getServings() const {
    return servings;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setServings(const double &servings) {
    this->servings = servings;
    this->m_servings_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_servings_Set() const{
    return m_servings_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_servings_Valid() const{
    return m_servings_isValid;
}

qint32 OAIGetRandomRecipes_200_response_recipes_inner::getReadyInMinutes() const {
    return ready_in_minutes;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setReadyInMinutes(const qint32 &ready_in_minutes) {
    this->ready_in_minutes = ready_in_minutes;
    this->m_ready_in_minutes_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_ready_in_minutes_Set() const{
    return m_ready_in_minutes_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_ready_in_minutes_Valid() const{
    return m_ready_in_minutes_isValid;
}

QString OAIGetRandomRecipes_200_response_recipes_inner::getLicense() const {
    return license;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setLicense(const QString &license) {
    this->license = license;
    this->m_license_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_license_Set() const{
    return m_license_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIGetRandomRecipes_200_response_recipes_inner::getSourceName() const {
    return source_name;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setSourceName(const QString &source_name) {
    this->source_name = source_name;
    this->m_source_name_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_source_name_Set() const{
    return m_source_name_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_source_name_Valid() const{
    return m_source_name_isValid;
}

QString OAIGetRandomRecipes_200_response_recipes_inner::getSourceUrl() const {
    return source_url;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setSourceUrl(const QString &source_url) {
    this->source_url = source_url;
    this->m_source_url_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QString OAIGetRandomRecipes_200_response_recipes_inner::getSpoonacularSourceUrl() const {
    return spoonacular_source_url;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setSpoonacularSourceUrl(const QString &spoonacular_source_url) {
    this->spoonacular_source_url = spoonacular_source_url;
    this->m_spoonacular_source_url_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_spoonacular_source_url_Set() const{
    return m_spoonacular_source_url_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_spoonacular_source_url_Valid() const{
    return m_spoonacular_source_url_isValid;
}

double OAIGetRandomRecipes_200_response_recipes_inner::getAggregateLikes() const {
    return aggregate_likes;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setAggregateLikes(const double &aggregate_likes) {
    this->aggregate_likes = aggregate_likes;
    this->m_aggregate_likes_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_aggregate_likes_Set() const{
    return m_aggregate_likes_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_aggregate_likes_Valid() const{
    return m_aggregate_likes_isValid;
}

double OAIGetRandomRecipes_200_response_recipes_inner::getHealthScore() const {
    return health_score;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setHealthScore(const double &health_score) {
    this->health_score = health_score;
    this->m_health_score_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_health_score_Set() const{
    return m_health_score_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_health_score_Valid() const{
    return m_health_score_isValid;
}

double OAIGetRandomRecipes_200_response_recipes_inner::getSpoonacularScore() const {
    return spoonacular_score;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setSpoonacularScore(const double &spoonacular_score) {
    this->spoonacular_score = spoonacular_score;
    this->m_spoonacular_score_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_spoonacular_score_Set() const{
    return m_spoonacular_score_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_spoonacular_score_Valid() const{
    return m_spoonacular_score_isValid;
}

double OAIGetRandomRecipes_200_response_recipes_inner::getPricePerServing() const {
    return price_per_serving;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setPricePerServing(const double &price_per_serving) {
    this->price_per_serving = price_per_serving;
    this->m_price_per_serving_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_price_per_serving_Set() const{
    return m_price_per_serving_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_price_per_serving_Valid() const{
    return m_price_per_serving_isValid;
}

QList<OAIObject> OAIGetRandomRecipes_200_response_recipes_inner::getAnalyzedInstructions() const {
    return analyzed_instructions;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setAnalyzedInstructions(const QList<OAIObject> &analyzed_instructions) {
    this->analyzed_instructions = analyzed_instructions;
    this->m_analyzed_instructions_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_analyzed_instructions_Set() const{
    return m_analyzed_instructions_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_analyzed_instructions_Valid() const{
    return m_analyzed_instructions_isValid;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::isCheap() const {
    return cheap;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setCheap(const bool &cheap) {
    this->cheap = cheap;
    this->m_cheap_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_cheap_Set() const{
    return m_cheap_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_cheap_Valid() const{
    return m_cheap_isValid;
}

QString OAIGetRandomRecipes_200_response_recipes_inner::getCreditsText() const {
    return credits_text;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setCreditsText(const QString &credits_text) {
    this->credits_text = credits_text;
    this->m_credits_text_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_credits_text_Set() const{
    return m_credits_text_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_credits_text_Valid() const{
    return m_credits_text_isValid;
}

QList<QString> OAIGetRandomRecipes_200_response_recipes_inner::getCuisines() const {
    return cuisines;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setCuisines(const QList<QString> &cuisines) {
    this->cuisines = cuisines;
    this->m_cuisines_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_cuisines_Set() const{
    return m_cuisines_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_cuisines_Valid() const{
    return m_cuisines_isValid;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::isDairyFree() const {
    return dairy_free;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setDairyFree(const bool &dairy_free) {
    this->dairy_free = dairy_free;
    this->m_dairy_free_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_dairy_free_Set() const{
    return m_dairy_free_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_dairy_free_Valid() const{
    return m_dairy_free_isValid;
}

QList<QString> OAIGetRandomRecipes_200_response_recipes_inner::getDiets() const {
    return diets;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setDiets(const QList<QString> &diets) {
    this->diets = diets;
    this->m_diets_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_diets_Set() const{
    return m_diets_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_diets_Valid() const{
    return m_diets_isValid;
}

QString OAIGetRandomRecipes_200_response_recipes_inner::getGaps() const {
    return gaps;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setGaps(const QString &gaps) {
    this->gaps = gaps;
    this->m_gaps_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_gaps_Set() const{
    return m_gaps_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_gaps_Valid() const{
    return m_gaps_isValid;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::isGlutenFree() const {
    return gluten_free;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setGlutenFree(const bool &gluten_free) {
    this->gluten_free = gluten_free;
    this->m_gluten_free_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_gluten_free_Set() const{
    return m_gluten_free_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_gluten_free_Valid() const{
    return m_gluten_free_isValid;
}

QString OAIGetRandomRecipes_200_response_recipes_inner::getInstructions() const {
    return instructions;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setInstructions(const QString &instructions) {
    this->instructions = instructions;
    this->m_instructions_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_instructions_Valid() const{
    return m_instructions_isValid;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::isKetogenic() const {
    return ketogenic;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setKetogenic(const bool &ketogenic) {
    this->ketogenic = ketogenic;
    this->m_ketogenic_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_ketogenic_Set() const{
    return m_ketogenic_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_ketogenic_Valid() const{
    return m_ketogenic_isValid;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::isLowFodmap() const {
    return low_fodmap;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setLowFodmap(const bool &low_fodmap) {
    this->low_fodmap = low_fodmap;
    this->m_low_fodmap_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_low_fodmap_Set() const{
    return m_low_fodmap_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_low_fodmap_Valid() const{
    return m_low_fodmap_isValid;
}

QList<QString> OAIGetRandomRecipes_200_response_recipes_inner::getOccasions() const {
    return occasions;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setOccasions(const QList<QString> &occasions) {
    this->occasions = occasions;
    this->m_occasions_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_occasions_Set() const{
    return m_occasions_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_occasions_Valid() const{
    return m_occasions_isValid;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::isSustainable() const {
    return sustainable;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setSustainable(const bool &sustainable) {
    this->sustainable = sustainable;
    this->m_sustainable_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_sustainable_Set() const{
    return m_sustainable_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_sustainable_Valid() const{
    return m_sustainable_isValid;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::isVegan() const {
    return vegan;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setVegan(const bool &vegan) {
    this->vegan = vegan;
    this->m_vegan_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_vegan_Set() const{
    return m_vegan_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_vegan_Valid() const{
    return m_vegan_isValid;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::isVegetarian() const {
    return vegetarian;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setVegetarian(const bool &vegetarian) {
    this->vegetarian = vegetarian;
    this->m_vegetarian_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_vegetarian_Set() const{
    return m_vegetarian_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_vegetarian_Valid() const{
    return m_vegetarian_isValid;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::isVeryHealthy() const {
    return very_healthy;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setVeryHealthy(const bool &very_healthy) {
    this->very_healthy = very_healthy;
    this->m_very_healthy_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_very_healthy_Set() const{
    return m_very_healthy_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_very_healthy_Valid() const{
    return m_very_healthy_isValid;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::isVeryPopular() const {
    return very_popular;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setVeryPopular(const bool &very_popular) {
    this->very_popular = very_popular;
    this->m_very_popular_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_very_popular_Set() const{
    return m_very_popular_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_very_popular_Valid() const{
    return m_very_popular_isValid;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::isWhole30() const {
    return whole30;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setWhole30(const bool &whole30) {
    this->whole30 = whole30;
    this->m_whole30_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_whole30_Set() const{
    return m_whole30_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_whole30_Valid() const{
    return m_whole30_isValid;
}

double OAIGetRandomRecipes_200_response_recipes_inner::getWeightWatcherSmartPoints() const {
    return weight_watcher_smart_points;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setWeightWatcherSmartPoints(const double &weight_watcher_smart_points) {
    this->weight_watcher_smart_points = weight_watcher_smart_points;
    this->m_weight_watcher_smart_points_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_weight_watcher_smart_points_Set() const{
    return m_weight_watcher_smart_points_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_weight_watcher_smart_points_Valid() const{
    return m_weight_watcher_smart_points_isValid;
}

QList<QString> OAIGetRandomRecipes_200_response_recipes_inner::getDishTypes() const {
    return dish_types;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setDishTypes(const QList<QString> &dish_types) {
    this->dish_types = dish_types;
    this->m_dish_types_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_dish_types_Set() const{
    return m_dish_types_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_dish_types_Valid() const{
    return m_dish_types_isValid;
}

QSet<OAIGetRecipeInformation_200_response_extendedIngredients_inner> OAIGetRandomRecipes_200_response_recipes_inner::getExtendedIngredients() const {
    return extended_ingredients;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setExtendedIngredients(const QSet<OAIGetRecipeInformation_200_response_extendedIngredients_inner> &extended_ingredients) {
    this->extended_ingredients = extended_ingredients;
    this->m_extended_ingredients_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_extended_ingredients_Set() const{
    return m_extended_ingredients_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_extended_ingredients_Valid() const{
    return m_extended_ingredients_isValid;
}

QString OAIGetRandomRecipes_200_response_recipes_inner::getSummary() const {
    return summary;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setSummary(const QString &summary) {
    this->summary = summary;
    this->m_summary_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_summary_Valid() const{
    return m_summary_isValid;
}

OAIGetRecipeInformation_200_response_winePairing OAIGetRandomRecipes_200_response_recipes_inner::getWinePairing() const {
    return wine_pairing;
}
void OAIGetRandomRecipes_200_response_recipes_inner::setWinePairing(const OAIGetRecipeInformation_200_response_winePairing &wine_pairing) {
    this->wine_pairing = wine_pairing;
    this->m_wine_pairing_isSet = true;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_wine_pairing_Set() const{
    return m_wine_pairing_isSet;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::is_wine_pairing_Valid() const{
    return m_wine_pairing_isValid;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_servings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ready_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoonacular_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregate_likes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoonacular_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_per_serving_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (analyzed_instructions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cheap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (cuisines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dairy_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (diets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gaps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gluten_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ketogenic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_fodmap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (occasions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sustainable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vegan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vegetarian_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_very_healthy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_very_popular_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_whole30_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_watcher_smart_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (dish_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (extended_ingredients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (wine_pairing.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRandomRecipes_200_response_recipes_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_title_isValid && m_image_isValid && m_image_type_isValid && m_servings_isValid && m_ready_in_minutes_isValid && m_license_isValid && m_source_name_isValid && m_source_url_isValid && m_spoonacular_source_url_isValid && m_aggregate_likes_isValid && m_health_score_isValid && m_spoonacular_score_isValid && m_price_per_serving_isValid && m_cheap_isValid && m_credits_text_isValid && m_dairy_free_isValid && m_gaps_isValid && m_gluten_free_isValid && m_instructions_isValid && m_ketogenic_isValid && m_low_fodmap_isValid && m_sustainable_isValid && m_vegan_isValid && m_vegetarian_isValid && m_very_healthy_isValid && m_very_popular_isValid && m_whole30_isValid && m_weight_watcher_smart_points_isValid && m_summary_isValid && true;
}

} // namespace OpenAPI
