/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchMenuItems_200_response_menuItems_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchMenuItems_200_response_menuItems_inner::OAISearchMenuItems_200_response_menuItems_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchMenuItems_200_response_menuItems_inner::OAISearchMenuItems_200_response_menuItems_inner() {
    this->initializeModel();
}

OAISearchMenuItems_200_response_menuItems_inner::~OAISearchMenuItems_200_response_menuItems_inner() {}

void OAISearchMenuItems_200_response_menuItems_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_restaurant_chain_isSet = false;
    m_restaurant_chain_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_servings_isSet = false;
    m_servings_isValid = false;
}

void OAISearchMenuItems_200_response_menuItems_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchMenuItems_200_response_menuItems_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_restaurant_chain_isValid = ::OpenAPI::fromJsonValue(restaurant_chain, json[QString("restaurantChain")]);
    m_restaurant_chain_isSet = !json[QString("restaurantChain")].isNull() && m_restaurant_chain_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_servings_isValid = ::OpenAPI::fromJsonValue(servings, json[QString("servings")]);
    m_servings_isSet = !json[QString("servings")].isNull() && m_servings_isValid;
}

QString OAISearchMenuItems_200_response_menuItems_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchMenuItems_200_response_menuItems_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(title));
    }
    if (m_restaurant_chain_isSet) {
        obj.insert(QString("restaurantChain"), ::OpenAPI::toJsonValue(restaurant_chain));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(image));
    }
    if (m_image_type_isSet) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(image_type));
    }
    if (servings.isSet()) {
        obj.insert(QString("servings"), ::OpenAPI::toJsonValue(servings));
    }
    return obj;
}

qint32 OAISearchMenuItems_200_response_menuItems_inner::getId() const {
    return id;
}
void OAISearchMenuItems_200_response_menuItems_inner::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAISearchMenuItems_200_response_menuItems_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAISearchMenuItems_200_response_menuItems_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISearchMenuItems_200_response_menuItems_inner::getTitle() const {
    return title;
}
void OAISearchMenuItems_200_response_menuItems_inner::setTitle(const QString &title) {
    this->title = title;
    this->m_title_isSet = true;
}

bool OAISearchMenuItems_200_response_menuItems_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAISearchMenuItems_200_response_menuItems_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAISearchMenuItems_200_response_menuItems_inner::getRestaurantChain() const {
    return restaurant_chain;
}
void OAISearchMenuItems_200_response_menuItems_inner::setRestaurantChain(const QString &restaurant_chain) {
    this->restaurant_chain = restaurant_chain;
    this->m_restaurant_chain_isSet = true;
}

bool OAISearchMenuItems_200_response_menuItems_inner::is_restaurant_chain_Set() const{
    return m_restaurant_chain_isSet;
}

bool OAISearchMenuItems_200_response_menuItems_inner::is_restaurant_chain_Valid() const{
    return m_restaurant_chain_isValid;
}

QString OAISearchMenuItems_200_response_menuItems_inner::getImage() const {
    return image;
}
void OAISearchMenuItems_200_response_menuItems_inner::setImage(const QString &image) {
    this->image = image;
    this->m_image_isSet = true;
}

bool OAISearchMenuItems_200_response_menuItems_inner::is_image_Set() const{
    return m_image_isSet;
}

bool OAISearchMenuItems_200_response_menuItems_inner::is_image_Valid() const{
    return m_image_isValid;
}

QString OAISearchMenuItems_200_response_menuItems_inner::getImageType() const {
    return image_type;
}
void OAISearchMenuItems_200_response_menuItems_inner::setImageType(const QString &image_type) {
    this->image_type = image_type;
    this->m_image_type_isSet = true;
}

bool OAISearchMenuItems_200_response_menuItems_inner::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAISearchMenuItems_200_response_menuItems_inner::is_image_type_Valid() const{
    return m_image_type_isValid;
}

OAISearchGroceryProductsByUPC_200_response_servings OAISearchMenuItems_200_response_menuItems_inner::getServings() const {
    return servings;
}
void OAISearchMenuItems_200_response_menuItems_inner::setServings(const OAISearchGroceryProductsByUPC_200_response_servings &servings) {
    this->servings = servings;
    this->m_servings_isSet = true;
}

bool OAISearchMenuItems_200_response_menuItems_inner::is_servings_Set() const{
    return m_servings_isSet;
}

bool OAISearchMenuItems_200_response_menuItems_inner::is_servings_Valid() const{
    return m_servings_isValid;
}

bool OAISearchMenuItems_200_response_menuItems_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restaurant_chain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (servings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchMenuItems_200_response_menuItems_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_title_isValid && m_restaurant_chain_isValid && m_image_isValid && m_image_type_isValid && true;
}

} // namespace OpenAPI
