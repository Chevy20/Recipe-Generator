/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMenuItemInformation_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMenuItemInformation_200_response::OAIGetMenuItemInformation_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMenuItemInformation_200_response::OAIGetMenuItemInformation_200_response() {
    this->initializeModel();
}

OAIGetMenuItemInformation_200_response::~OAIGetMenuItemInformation_200_response() {}

void OAIGetMenuItemInformation_200_response::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_restaurant_chain_isSet = false;
    m_restaurant_chain_isValid = false;

    m_nutrition_isSet = false;
    m_nutrition_isValid = false;

    m_badges_isSet = false;
    m_badges_isValid = false;

    m_breadcrumbs_isSet = false;
    m_breadcrumbs_isValid = false;

    m_generated_text_isSet = false;
    m_generated_text_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_likes_isSet = false;
    m_likes_isValid = false;

    m_servings_isSet = false;
    m_servings_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_spoonacular_score_isSet = false;
    m_spoonacular_score_isValid = false;
}

void OAIGetMenuItemInformation_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMenuItemInformation_200_response::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_restaurant_chain_isValid = ::OpenAPI::fromJsonValue(restaurant_chain, json[QString("restaurantChain")]);
    m_restaurant_chain_isSet = !json[QString("restaurantChain")].isNull() && m_restaurant_chain_isValid;

    m_nutrition_isValid = ::OpenAPI::fromJsonValue(nutrition, json[QString("nutrition")]);
    m_nutrition_isSet = !json[QString("nutrition")].isNull() && m_nutrition_isValid;

    m_badges_isValid = ::OpenAPI::fromJsonValue(badges, json[QString("badges")]);
    m_badges_isSet = !json[QString("badges")].isNull() && m_badges_isValid;

    m_breadcrumbs_isValid = ::OpenAPI::fromJsonValue(breadcrumbs, json[QString("breadcrumbs")]);
    m_breadcrumbs_isSet = !json[QString("breadcrumbs")].isNull() && m_breadcrumbs_isValid;

    m_generated_text_isValid = ::OpenAPI::fromJsonValue(generated_text, json[QString("generatedText")]);
    m_generated_text_isSet = !json[QString("generatedText")].isNull() && m_generated_text_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_likes_isValid = ::OpenAPI::fromJsonValue(likes, json[QString("likes")]);
    m_likes_isSet = !json[QString("likes")].isNull() && m_likes_isValid;

    m_servings_isValid = ::OpenAPI::fromJsonValue(servings, json[QString("servings")]);
    m_servings_isSet = !json[QString("servings")].isNull() && m_servings_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_spoonacular_score_isValid = ::OpenAPI::fromJsonValue(spoonacular_score, json[QString("spoonacularScore")]);
    m_spoonacular_score_isSet = !json[QString("spoonacularScore")].isNull() && m_spoonacular_score_isValid;
}

QString OAIGetMenuItemInformation_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMenuItemInformation_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(title));
    }
    if (m_restaurant_chain_isSet) {
        obj.insert(QString("restaurantChain"), ::OpenAPI::toJsonValue(restaurant_chain));
    }
    if (nutrition.isSet()) {
        obj.insert(QString("nutrition"), ::OpenAPI::toJsonValue(nutrition));
    }
    if (badges.size() > 0) {
        obj.insert(QString("badges"), ::OpenAPI::toJsonValue(badges));
    }
    if (breadcrumbs.size() > 0) {
        obj.insert(QString("breadcrumbs"), ::OpenAPI::toJsonValue(breadcrumbs));
    }
    if (m_generated_text_isSet) {
        obj.insert(QString("generatedText"), ::OpenAPI::toJsonValue(generated_text));
    }
    if (m_image_type_isSet) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(image_type));
    }
    if (m_likes_isSet) {
        obj.insert(QString("likes"), ::OpenAPI::toJsonValue(likes));
    }
    if (servings.isSet()) {
        obj.insert(QString("servings"), ::OpenAPI::toJsonValue(servings));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(price));
    }
    if (m_spoonacular_score_isSet) {
        obj.insert(QString("spoonacularScore"), ::OpenAPI::toJsonValue(spoonacular_score));
    }
    return obj;
}

qint32 OAIGetMenuItemInformation_200_response::getId() const {
    return id;
}
void OAIGetMenuItemInformation_200_response::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIGetMenuItemInformation_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetMenuItemInformation_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetMenuItemInformation_200_response::getTitle() const {
    return title;
}
void OAIGetMenuItemInformation_200_response::setTitle(const QString &title) {
    this->title = title;
    this->m_title_isSet = true;
}

bool OAIGetMenuItemInformation_200_response::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGetMenuItemInformation_200_response::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGetMenuItemInformation_200_response::getRestaurantChain() const {
    return restaurant_chain;
}
void OAIGetMenuItemInformation_200_response::setRestaurantChain(const QString &restaurant_chain) {
    this->restaurant_chain = restaurant_chain;
    this->m_restaurant_chain_isSet = true;
}

bool OAIGetMenuItemInformation_200_response::is_restaurant_chain_Set() const{
    return m_restaurant_chain_isSet;
}

bool OAIGetMenuItemInformation_200_response::is_restaurant_chain_Valid() const{
    return m_restaurant_chain_isValid;
}

OAISearchGroceryProductsByUPC_200_response_nutrition OAIGetMenuItemInformation_200_response::getNutrition() const {
    return nutrition;
}
void OAIGetMenuItemInformation_200_response::setNutrition(const OAISearchGroceryProductsByUPC_200_response_nutrition &nutrition) {
    this->nutrition = nutrition;
    this->m_nutrition_isSet = true;
}

bool OAIGetMenuItemInformation_200_response::is_nutrition_Set() const{
    return m_nutrition_isSet;
}

bool OAIGetMenuItemInformation_200_response::is_nutrition_Valid() const{
    return m_nutrition_isValid;
}

QList<QString> OAIGetMenuItemInformation_200_response::getBadges() const {
    return badges;
}
void OAIGetMenuItemInformation_200_response::setBadges(const QList<QString> &badges) {
    this->badges = badges;
    this->m_badges_isSet = true;
}

bool OAIGetMenuItemInformation_200_response::is_badges_Set() const{
    return m_badges_isSet;
}

bool OAIGetMenuItemInformation_200_response::is_badges_Valid() const{
    return m_badges_isValid;
}

QList<QString> OAIGetMenuItemInformation_200_response::getBreadcrumbs() const {
    return breadcrumbs;
}
void OAIGetMenuItemInformation_200_response::setBreadcrumbs(const QList<QString> &breadcrumbs) {
    this->breadcrumbs = breadcrumbs;
    this->m_breadcrumbs_isSet = true;
}

bool OAIGetMenuItemInformation_200_response::is_breadcrumbs_Set() const{
    return m_breadcrumbs_isSet;
}

bool OAIGetMenuItemInformation_200_response::is_breadcrumbs_Valid() const{
    return m_breadcrumbs_isValid;
}

QString OAIGetMenuItemInformation_200_response::getGeneratedText() const {
    return generated_text;
}
void OAIGetMenuItemInformation_200_response::setGeneratedText(const QString &generated_text) {
    this->generated_text = generated_text;
    this->m_generated_text_isSet = true;
}

bool OAIGetMenuItemInformation_200_response::is_generated_text_Set() const{
    return m_generated_text_isSet;
}

bool OAIGetMenuItemInformation_200_response::is_generated_text_Valid() const{
    return m_generated_text_isValid;
}

QString OAIGetMenuItemInformation_200_response::getImageType() const {
    return image_type;
}
void OAIGetMenuItemInformation_200_response::setImageType(const QString &image_type) {
    this->image_type = image_type;
    this->m_image_type_isSet = true;
}

bool OAIGetMenuItemInformation_200_response::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAIGetMenuItemInformation_200_response::is_image_type_Valid() const{
    return m_image_type_isValid;
}

double OAIGetMenuItemInformation_200_response::getLikes() const {
    return likes;
}
void OAIGetMenuItemInformation_200_response::setLikes(const double &likes) {
    this->likes = likes;
    this->m_likes_isSet = true;
}

bool OAIGetMenuItemInformation_200_response::is_likes_Set() const{
    return m_likes_isSet;
}

bool OAIGetMenuItemInformation_200_response::is_likes_Valid() const{
    return m_likes_isValid;
}

OAISearchGroceryProductsByUPC_200_response_servings OAIGetMenuItemInformation_200_response::getServings() const {
    return servings;
}
void OAIGetMenuItemInformation_200_response::setServings(const OAISearchGroceryProductsByUPC_200_response_servings &servings) {
    this->servings = servings;
    this->m_servings_isSet = true;
}

bool OAIGetMenuItemInformation_200_response::is_servings_Set() const{
    return m_servings_isSet;
}

bool OAIGetMenuItemInformation_200_response::is_servings_Valid() const{
    return m_servings_isValid;
}

double OAIGetMenuItemInformation_200_response::getPrice() const {
    return price;
}
void OAIGetMenuItemInformation_200_response::setPrice(const double &price) {
    this->price = price;
    this->m_price_isSet = true;
}

bool OAIGetMenuItemInformation_200_response::is_price_Set() const{
    return m_price_isSet;
}

bool OAIGetMenuItemInformation_200_response::is_price_Valid() const{
    return m_price_isValid;
}

double OAIGetMenuItemInformation_200_response::getSpoonacularScore() const {
    return spoonacular_score;
}
void OAIGetMenuItemInformation_200_response::setSpoonacularScore(const double &spoonacular_score) {
    this->spoonacular_score = spoonacular_score;
    this->m_spoonacular_score_isSet = true;
}

bool OAIGetMenuItemInformation_200_response::is_spoonacular_score_Set() const{
    return m_spoonacular_score_isSet;
}

bool OAIGetMenuItemInformation_200_response::is_spoonacular_score_Valid() const{
    return m_spoonacular_score_isValid;
}

bool OAIGetMenuItemInformation_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restaurant_chain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (nutrition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (badges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (breadcrumbs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_generated_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_likes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (servings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoonacular_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMenuItemInformation_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_title_isValid && m_restaurant_chain_isValid && m_nutrition_isValid && m_badges_isValid && m_breadcrumbs_isValid && m_image_type_isValid && m_likes_isValid && m_servings_isValid && true;
}

} // namespace OpenAPI
