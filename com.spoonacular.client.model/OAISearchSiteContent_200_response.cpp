/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchSiteContent_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchSiteContent_200_response::OAISearchSiteContent_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchSiteContent_200_response::OAISearchSiteContent_200_response() {
    this->initializeModel();
}

OAISearchSiteContent_200_response::~OAISearchSiteContent_200_response() {}

void OAISearchSiteContent_200_response::initializeModel() {

    m_articles_isSet = false;
    m_articles_isValid = false;

    m_grocery_products_isSet = false;
    m_grocery_products_isValid = false;

    m_menu_items_isSet = false;
    m_menu_items_isValid = false;

    m_recipes_isSet = false;
    m_recipes_isValid = false;
}

void OAISearchSiteContent_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchSiteContent_200_response::fromJsonObject(QJsonObject json) {

    m_articles_isValid = ::OpenAPI::fromJsonValue(articles, json[QString("Articles")]);
    m_articles_isSet = !json[QString("Articles")].isNull() && m_articles_isValid;

    m_grocery_products_isValid = ::OpenAPI::fromJsonValue(grocery_products, json[QString("Grocery Products")]);
    m_grocery_products_isSet = !json[QString("Grocery Products")].isNull() && m_grocery_products_isValid;

    m_menu_items_isValid = ::OpenAPI::fromJsonValue(menu_items, json[QString("Menu Items")]);
    m_menu_items_isSet = !json[QString("Menu Items")].isNull() && m_menu_items_isValid;

    m_recipes_isValid = ::OpenAPI::fromJsonValue(recipes, json[QString("Recipes")]);
    m_recipes_isSet = !json[QString("Recipes")].isNull() && m_recipes_isValid;
}

QString OAISearchSiteContent_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchSiteContent_200_response::asJsonObject() const {
    QJsonObject obj;
    if (articles.size() > 0) {
        obj.insert(QString("Articles"), ::OpenAPI::toJsonValue(articles));
    }
    if (grocery_products.size() > 0) {
        obj.insert(QString("Grocery Products"), ::OpenAPI::toJsonValue(grocery_products));
    }
    if (menu_items.size() > 0) {
        obj.insert(QString("Menu Items"), ::OpenAPI::toJsonValue(menu_items));
    }
    if (recipes.size() > 0) {
        obj.insert(QString("Recipes"), ::OpenAPI::toJsonValue(recipes));
    }
    return obj;
}

QSet<OAISearchSiteContent_200_response_Articles_inner> OAISearchSiteContent_200_response::getArticles() const {
    return articles;
}
void OAISearchSiteContent_200_response::setArticles(const QSet<OAISearchSiteContent_200_response_Articles_inner> &articles) {
    this->articles = articles;
    this->m_articles_isSet = true;
}

bool OAISearchSiteContent_200_response::is_articles_Set() const{
    return m_articles_isSet;
}

bool OAISearchSiteContent_200_response::is_articles_Valid() const{
    return m_articles_isValid;
}

QSet<OAISearchSiteContent_200_response_Grocery_Products_inner> OAISearchSiteContent_200_response::getGroceryProducts() const {
    return grocery_products;
}
void OAISearchSiteContent_200_response::setGroceryProducts(const QSet<OAISearchSiteContent_200_response_Grocery_Products_inner> &grocery_products) {
    this->grocery_products = grocery_products;
    this->m_grocery_products_isSet = true;
}

bool OAISearchSiteContent_200_response::is_grocery_products_Set() const{
    return m_grocery_products_isSet;
}

bool OAISearchSiteContent_200_response::is_grocery_products_Valid() const{
    return m_grocery_products_isValid;
}

QSet<OAISearchSiteContent_200_response_Grocery_Products_inner> OAISearchSiteContent_200_response::getMenuItems() const {
    return menu_items;
}
void OAISearchSiteContent_200_response::setMenuItems(const QSet<OAISearchSiteContent_200_response_Grocery_Products_inner> &menu_items) {
    this->menu_items = menu_items;
    this->m_menu_items_isSet = true;
}

bool OAISearchSiteContent_200_response::is_menu_items_Set() const{
    return m_menu_items_isSet;
}

bool OAISearchSiteContent_200_response::is_menu_items_Valid() const{
    return m_menu_items_isValid;
}

QSet<OAISearchSiteContent_200_response_Grocery_Products_inner> OAISearchSiteContent_200_response::getRecipes() const {
    return recipes;
}
void OAISearchSiteContent_200_response::setRecipes(const QSet<OAISearchSiteContent_200_response_Grocery_Products_inner> &recipes) {
    this->recipes = recipes;
    this->m_recipes_isSet = true;
}

bool OAISearchSiteContent_200_response::is_recipes_Set() const{
    return m_recipes_isSet;
}

bool OAISearchSiteContent_200_response::is_recipes_Valid() const{
    return m_recipes_isValid;
}

bool OAISearchSiteContent_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (articles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (grocery_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (menu_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (recipes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchSiteContent_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_articles_isValid && m_grocery_products_isValid && m_menu_items_isValid && m_recipes_isValid && true;
}

} // namespace OpenAPI
