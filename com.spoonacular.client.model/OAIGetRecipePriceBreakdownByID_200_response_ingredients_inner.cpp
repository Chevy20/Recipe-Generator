/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner() {
    this->initializeModel();
}

OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::~OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner() {}

void OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::asJsonObject() const {
    QJsonObject obj;
    if (amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(amount));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(price));
    }
    return obj;
}

OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner_amount OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::getAmount() const {
    return amount;
}
void OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::setAmount(const OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner_amount &amount) {
    this->amount = amount;
    this->m_amount_isSet = true;
}

bool OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::getImage() const {
    return image;
}
void OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::setImage(const QString &image) {
    this->image = image;
    this->m_image_isSet = true;
}

bool OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::is_image_Set() const{
    return m_image_isSet;
}

bool OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::getName() const {
    return name;
}
void OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::is_name_Valid() const{
    return m_name_isValid;
}

double OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::getPrice() const {
    return price;
}
void OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::setPrice(const double &price) {
    this->price = price;
    this->m_price_isSet = true;
}

bool OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::is_price_Set() const{
    return m_price_isSet;
}

bool OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::is_price_Valid() const{
    return m_price_isValid;
}

bool OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRecipePriceBreakdownByID_200_response_ingredients_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_isValid && m_name_isValid && m_price_isValid && true;
}

} // namespace OpenAPI
