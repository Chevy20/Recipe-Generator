/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchRestaurants_200_response_restaurants_inner_address.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchRestaurants_200_response_restaurants_inner_address::OAISearchRestaurants_200_response_restaurants_inner_address(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchRestaurants_200_response_restaurants_inner_address::OAISearchRestaurants_200_response_restaurants_inner_address() {
    this->initializeModel();
}

OAISearchRestaurants_200_response_restaurants_inner_address::~OAISearchRestaurants_200_response_restaurants_inner_address() {}

void OAISearchRestaurants_200_response_restaurants_inner_address::initializeModel() {

    m_street_addr_isSet = false;
    m_street_addr_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_zipcode_isSet = false;
    m_zipcode_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_street_addr_2_isSet = false;
    m_street_addr_2_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;
}

void OAISearchRestaurants_200_response_restaurants_inner_address::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchRestaurants_200_response_restaurants_inner_address::fromJsonObject(QJsonObject json) {

    m_street_addr_isValid = ::OpenAPI::fromJsonValue(street_addr, json[QString("street_addr")]);
    m_street_addr_isSet = !json[QString("street_addr")].isNull() && m_street_addr_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_zipcode_isValid = ::OpenAPI::fromJsonValue(zipcode, json[QString("zipcode")]);
    m_zipcode_isSet = !json[QString("zipcode")].isNull() && m_zipcode_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_street_addr_2_isValid = ::OpenAPI::fromJsonValue(street_addr_2, json[QString("street_addr_2")]);
    m_street_addr_2_isSet = !json[QString("street_addr_2")].isNull() && m_street_addr_2_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;
}

QString OAISearchRestaurants_200_response_restaurants_inner_address::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchRestaurants_200_response_restaurants_inner_address::asJsonObject() const {
    QJsonObject obj;
    if (m_street_addr_isSet) {
        obj.insert(QString("street_addr"), ::OpenAPI::toJsonValue(street_addr));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(city));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(state));
    }
    if (m_zipcode_isSet) {
        obj.insert(QString("zipcode"), ::OpenAPI::toJsonValue(zipcode));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(country));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(lon));
    }
    if (m_street_addr_2_isSet) {
        obj.insert(QString("street_addr_2"), ::OpenAPI::toJsonValue(street_addr_2));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(longitude));
    }
    return obj;
}

QString OAISearchRestaurants_200_response_restaurants_inner_address::getStreetAddr() const {
    return street_addr;
}
void OAISearchRestaurants_200_response_restaurants_inner_address::setStreetAddr(const QString &street_addr) {
    this->street_addr = street_addr;
    this->m_street_addr_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_street_addr_Set() const{
    return m_street_addr_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_street_addr_Valid() const{
    return m_street_addr_isValid;
}

QString OAISearchRestaurants_200_response_restaurants_inner_address::getCity() const {
    return city;
}
void OAISearchRestaurants_200_response_restaurants_inner_address::setCity(const QString &city) {
    this->city = city;
    this->m_city_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_city_Set() const{
    return m_city_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_city_Valid() const{
    return m_city_isValid;
}

QString OAISearchRestaurants_200_response_restaurants_inner_address::getState() const {
    return state;
}
void OAISearchRestaurants_200_response_restaurants_inner_address::setState(const QString &state) {
    this->state = state;
    this->m_state_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_state_Set() const{
    return m_state_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISearchRestaurants_200_response_restaurants_inner_address::getZipcode() const {
    return zipcode;
}
void OAISearchRestaurants_200_response_restaurants_inner_address::setZipcode(const QString &zipcode) {
    this->zipcode = zipcode;
    this->m_zipcode_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_zipcode_Set() const{
    return m_zipcode_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_zipcode_Valid() const{
    return m_zipcode_isValid;
}

QString OAISearchRestaurants_200_response_restaurants_inner_address::getCountry() const {
    return country;
}
void OAISearchRestaurants_200_response_restaurants_inner_address::setCountry(const QString &country) {
    this->country = country;
    this->m_country_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_country_Set() const{
    return m_country_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_country_Valid() const{
    return m_country_isValid;
}

double OAISearchRestaurants_200_response_restaurants_inner_address::getLat() const {
    return lat;
}
void OAISearchRestaurants_200_response_restaurants_inner_address::setLat(const double &lat) {
    this->lat = lat;
    this->m_lat_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAISearchRestaurants_200_response_restaurants_inner_address::getLon() const {
    return lon;
}
void OAISearchRestaurants_200_response_restaurants_inner_address::setLon(const double &lon) {
    this->lon = lon;
    this->m_lon_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_lon_Valid() const{
    return m_lon_isValid;
}

QString OAISearchRestaurants_200_response_restaurants_inner_address::getStreetAddr2() const {
    return street_addr_2;
}
void OAISearchRestaurants_200_response_restaurants_inner_address::setStreetAddr2(const QString &street_addr_2) {
    this->street_addr_2 = street_addr_2;
    this->m_street_addr_2_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_street_addr_2_Set() const{
    return m_street_addr_2_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_street_addr_2_Valid() const{
    return m_street_addr_2_isValid;
}

double OAISearchRestaurants_200_response_restaurants_inner_address::getLatitude() const {
    return latitude;
}
void OAISearchRestaurants_200_response_restaurants_inner_address::setLatitude(const double &latitude) {
    this->latitude = latitude;
    this->m_latitude_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAISearchRestaurants_200_response_restaurants_inner_address::getLongitude() const {
    return longitude;
}
void OAISearchRestaurants_200_response_restaurants_inner_address::setLongitude(const double &longitude) {
    this->longitude = longitude;
    this->m_longitude_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::is_longitude_Valid() const{
    return m_longitude_isValid;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_street_addr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zipcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_addr_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchRestaurants_200_response_restaurants_inner_address::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
