/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchRecipesByNutrients_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchRecipesByNutrients_200_response_inner::OAISearchRecipesByNutrients_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchRecipesByNutrients_200_response_inner::OAISearchRecipesByNutrients_200_response_inner() {
    this->initializeModel();
}

OAISearchRecipesByNutrients_200_response_inner::~OAISearchRecipesByNutrients_200_response_inner() {}

void OAISearchRecipesByNutrients_200_response_inner::initializeModel() {

    m_calories_isSet = false;
    m_calories_isValid = false;

    m_carbs_isSet = false;
    m_carbs_isValid = false;

    m_fat_isSet = false;
    m_fat_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_protein_isSet = false;
    m_protein_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISearchRecipesByNutrients_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchRecipesByNutrients_200_response_inner::fromJsonObject(QJsonObject json) {

    m_calories_isValid = ::OpenAPI::fromJsonValue(calories, json[QString("calories")]);
    m_calories_isSet = !json[QString("calories")].isNull() && m_calories_isValid;

    m_carbs_isValid = ::OpenAPI::fromJsonValue(carbs, json[QString("carbs")]);
    m_carbs_isSet = !json[QString("carbs")].isNull() && m_carbs_isValid;

    m_fat_isValid = ::OpenAPI::fromJsonValue(fat, json[QString("fat")]);
    m_fat_isSet = !json[QString("fat")].isNull() && m_fat_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_protein_isValid = ::OpenAPI::fromJsonValue(protein, json[QString("protein")]);
    m_protein_isSet = !json[QString("protein")].isNull() && m_protein_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISearchRecipesByNutrients_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchRecipesByNutrients_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_calories_isSet) {
        obj.insert(QString("calories"), ::OpenAPI::toJsonValue(calories));
    }
    if (m_carbs_isSet) {
        obj.insert(QString("carbs"), ::OpenAPI::toJsonValue(carbs));
    }
    if (m_fat_isSet) {
        obj.insert(QString("fat"), ::OpenAPI::toJsonValue(fat));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(image));
    }
    if (m_image_type_isSet) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(image_type));
    }
    if (m_protein_isSet) {
        obj.insert(QString("protein"), ::OpenAPI::toJsonValue(protein));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(title));
    }
    return obj;
}

double OAISearchRecipesByNutrients_200_response_inner::getCalories() const {
    return calories;
}
void OAISearchRecipesByNutrients_200_response_inner::setCalories(const double &calories) {
    this->calories = calories;
    this->m_calories_isSet = true;
}

bool OAISearchRecipesByNutrients_200_response_inner::is_calories_Set() const{
    return m_calories_isSet;
}

bool OAISearchRecipesByNutrients_200_response_inner::is_calories_Valid() const{
    return m_calories_isValid;
}

QString OAISearchRecipesByNutrients_200_response_inner::getCarbs() const {
    return carbs;
}
void OAISearchRecipesByNutrients_200_response_inner::setCarbs(const QString &carbs) {
    this->carbs = carbs;
    this->m_carbs_isSet = true;
}

bool OAISearchRecipesByNutrients_200_response_inner::is_carbs_Set() const{
    return m_carbs_isSet;
}

bool OAISearchRecipesByNutrients_200_response_inner::is_carbs_Valid() const{
    return m_carbs_isValid;
}

QString OAISearchRecipesByNutrients_200_response_inner::getFat() const {
    return fat;
}
void OAISearchRecipesByNutrients_200_response_inner::setFat(const QString &fat) {
    this->fat = fat;
    this->m_fat_isSet = true;
}

bool OAISearchRecipesByNutrients_200_response_inner::is_fat_Set() const{
    return m_fat_isSet;
}

bool OAISearchRecipesByNutrients_200_response_inner::is_fat_Valid() const{
    return m_fat_isValid;
}

qint32 OAISearchRecipesByNutrients_200_response_inner::getId() const {
    return id;
}
void OAISearchRecipesByNutrients_200_response_inner::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAISearchRecipesByNutrients_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAISearchRecipesByNutrients_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISearchRecipesByNutrients_200_response_inner::getImage() const {
    return image;
}
void OAISearchRecipesByNutrients_200_response_inner::setImage(const QString &image) {
    this->image = image;
    this->m_image_isSet = true;
}

bool OAISearchRecipesByNutrients_200_response_inner::is_image_Set() const{
    return m_image_isSet;
}

bool OAISearchRecipesByNutrients_200_response_inner::is_image_Valid() const{
    return m_image_isValid;
}

QString OAISearchRecipesByNutrients_200_response_inner::getImageType() const {
    return image_type;
}
void OAISearchRecipesByNutrients_200_response_inner::setImageType(const QString &image_type) {
    this->image_type = image_type;
    this->m_image_type_isSet = true;
}

bool OAISearchRecipesByNutrients_200_response_inner::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAISearchRecipesByNutrients_200_response_inner::is_image_type_Valid() const{
    return m_image_type_isValid;
}

QString OAISearchRecipesByNutrients_200_response_inner::getProtein() const {
    return protein;
}
void OAISearchRecipesByNutrients_200_response_inner::setProtein(const QString &protein) {
    this->protein = protein;
    this->m_protein_isSet = true;
}

bool OAISearchRecipesByNutrients_200_response_inner::is_protein_Set() const{
    return m_protein_isSet;
}

bool OAISearchRecipesByNutrients_200_response_inner::is_protein_Valid() const{
    return m_protein_isValid;
}

QString OAISearchRecipesByNutrients_200_response_inner::getTitle() const {
    return title;
}
void OAISearchRecipesByNutrients_200_response_inner::setTitle(const QString &title) {
    this->title = title;
    this->m_title_isSet = true;
}

bool OAISearchRecipesByNutrients_200_response_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAISearchRecipesByNutrients_200_response_inner::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISearchRecipesByNutrients_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carbs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protein_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchRecipesByNutrients_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_calories_isValid && m_carbs_isValid && m_fat_isValid && m_id_isValid && m_image_isValid && m_image_type_isValid && m_protein_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
