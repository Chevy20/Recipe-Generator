/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchRecipes_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchRecipes_200_response::OAISearchRecipes_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchRecipes_200_response::OAISearchRecipes_200_response() {
    this->initializeModel();
}

OAISearchRecipes_200_response::~OAISearchRecipes_200_response() {}

void OAISearchRecipes_200_response::initializeModel() {

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;
}

void OAISearchRecipes_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchRecipes_200_response::fromJsonObject(QJsonObject json) {

    m_offset_isValid = ::OpenAPI::fromJsonValue(offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(total_results, json[QString("totalResults")]);
    m_total_results_isSet = !json[QString("totalResults")].isNull() && m_total_results_isValid;
}

QString OAISearchRecipes_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchRecipes_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(offset));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(number));
    }
    if (results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(results));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("totalResults"), ::OpenAPI::toJsonValue(total_results));
    }
    return obj;
}

qint32 OAISearchRecipes_200_response::getOffset() const {
    return offset;
}
void OAISearchRecipes_200_response::setOffset(const qint32 &offset) {
    this->offset = offset;
    this->m_offset_isSet = true;
}

bool OAISearchRecipes_200_response::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAISearchRecipes_200_response::is_offset_Valid() const{
    return m_offset_isValid;
}

qint32 OAISearchRecipes_200_response::getNumber() const {
    return number;
}
void OAISearchRecipes_200_response::setNumber(const qint32 &number) {
    this->number = number;
    this->m_number_isSet = true;
}

bool OAISearchRecipes_200_response::is_number_Set() const{
    return m_number_isSet;
}

bool OAISearchRecipes_200_response::is_number_Valid() const{
    return m_number_isValid;
}

QSet<OAISearchRecipes_200_response_results_inner> OAISearchRecipes_200_response::getResults() const {
    return results;
}
void OAISearchRecipes_200_response::setResults(const QSet<OAISearchRecipes_200_response_results_inner> &results) {
    this->results = results;
    this->m_results_isSet = true;
}

bool OAISearchRecipes_200_response::is_results_Set() const{
    return m_results_isSet;
}

bool OAISearchRecipes_200_response::is_results_Valid() const{
    return m_results_isValid;
}

qint32 OAISearchRecipes_200_response::getTotalResults() const {
    return total_results;
}
void OAISearchRecipes_200_response::setTotalResults(const qint32 &total_results) {
    this->total_results = total_results;
    this->m_total_results_isSet = true;
}

bool OAISearchRecipes_200_response::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAISearchRecipes_200_response::is_total_results_Valid() const{
    return m_total_results_isValid;
}

bool OAISearchRecipes_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchRecipes_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_offset_isValid && m_number_isValid && m_results_isValid && m_total_results_isValid && true;
}

} // namespace OpenAPI
