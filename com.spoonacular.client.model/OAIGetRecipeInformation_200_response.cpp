/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRecipeInformation_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRecipeInformation_200_response::OAIGetRecipeInformation_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRecipeInformation_200_response::OAIGetRecipeInformation_200_response() {
    this->initializeModel();
}

OAIGetRecipeInformation_200_response::~OAIGetRecipeInformation_200_response() {}

void OAIGetRecipeInformation_200_response::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_servings_isSet = false;
    m_servings_isValid = false;

    m_ready_in_minutes_isSet = false;
    m_ready_in_minutes_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_source_name_isSet = false;
    m_source_name_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_spoonacular_source_url_isSet = false;
    m_spoonacular_source_url_isValid = false;

    m_aggregate_likes_isSet = false;
    m_aggregate_likes_isValid = false;

    m_health_score_isSet = false;
    m_health_score_isValid = false;

    m_spoonacular_score_isSet = false;
    m_spoonacular_score_isValid = false;

    m_price_per_serving_isSet = false;
    m_price_per_serving_isValid = false;

    m_analyzed_instructions_isSet = false;
    m_analyzed_instructions_isValid = false;

    m_cheap_isSet = false;
    m_cheap_isValid = false;

    m_credits_text_isSet = false;
    m_credits_text_isValid = false;

    m_cuisines_isSet = false;
    m_cuisines_isValid = false;

    m_dairy_free_isSet = false;
    m_dairy_free_isValid = false;

    m_diets_isSet = false;
    m_diets_isValid = false;

    m_gaps_isSet = false;
    m_gaps_isValid = false;

    m_gluten_free_isSet = false;
    m_gluten_free_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_ketogenic_isSet = false;
    m_ketogenic_isValid = false;

    m_low_fodmap_isSet = false;
    m_low_fodmap_isValid = false;

    m_occasions_isSet = false;
    m_occasions_isValid = false;

    m_sustainable_isSet = false;
    m_sustainable_isValid = false;

    m_vegan_isSet = false;
    m_vegan_isValid = false;

    m_vegetarian_isSet = false;
    m_vegetarian_isValid = false;

    m_very_healthy_isSet = false;
    m_very_healthy_isValid = false;

    m_very_popular_isSet = false;
    m_very_popular_isValid = false;

    m_whole30_isSet = false;
    m_whole30_isValid = false;

    m_weight_watcher_smart_points_isSet = false;
    m_weight_watcher_smart_points_isValid = false;

    m_dish_types_isSet = false;
    m_dish_types_isValid = false;

    m_extended_ingredients_isSet = false;
    m_extended_ingredients_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_wine_pairing_isSet = false;
    m_wine_pairing_isValid = false;
}

void OAIGetRecipeInformation_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRecipeInformation_200_response::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_servings_isValid = ::OpenAPI::fromJsonValue(servings, json[QString("servings")]);
    m_servings_isSet = !json[QString("servings")].isNull() && m_servings_isValid;

    m_ready_in_minutes_isValid = ::OpenAPI::fromJsonValue(ready_in_minutes, json[QString("readyInMinutes")]);
    m_ready_in_minutes_isSet = !json[QString("readyInMinutes")].isNull() && m_ready_in_minutes_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_source_name_isValid = ::OpenAPI::fromJsonValue(source_name, json[QString("sourceName")]);
    m_source_name_isSet = !json[QString("sourceName")].isNull() && m_source_name_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(source_url, json[QString("sourceUrl")]);
    m_source_url_isSet = !json[QString("sourceUrl")].isNull() && m_source_url_isValid;

    m_spoonacular_source_url_isValid = ::OpenAPI::fromJsonValue(spoonacular_source_url, json[QString("spoonacularSourceUrl")]);
    m_spoonacular_source_url_isSet = !json[QString("spoonacularSourceUrl")].isNull() && m_spoonacular_source_url_isValid;

    m_aggregate_likes_isValid = ::OpenAPI::fromJsonValue(aggregate_likes, json[QString("aggregateLikes")]);
    m_aggregate_likes_isSet = !json[QString("aggregateLikes")].isNull() && m_aggregate_likes_isValid;

    m_health_score_isValid = ::OpenAPI::fromJsonValue(health_score, json[QString("healthScore")]);
    m_health_score_isSet = !json[QString("healthScore")].isNull() && m_health_score_isValid;

    m_spoonacular_score_isValid = ::OpenAPI::fromJsonValue(spoonacular_score, json[QString("spoonacularScore")]);
    m_spoonacular_score_isSet = !json[QString("spoonacularScore")].isNull() && m_spoonacular_score_isValid;

    m_price_per_serving_isValid = ::OpenAPI::fromJsonValue(price_per_serving, json[QString("pricePerServing")]);
    m_price_per_serving_isSet = !json[QString("pricePerServing")].isNull() && m_price_per_serving_isValid;

    m_analyzed_instructions_isValid = ::OpenAPI::fromJsonValue(analyzed_instructions, json[QString("analyzedInstructions")]);
    m_analyzed_instructions_isSet = !json[QString("analyzedInstructions")].isNull() && m_analyzed_instructions_isValid;

    m_cheap_isValid = ::OpenAPI::fromJsonValue(cheap, json[QString("cheap")]);
    m_cheap_isSet = !json[QString("cheap")].isNull() && m_cheap_isValid;

    m_credits_text_isValid = ::OpenAPI::fromJsonValue(credits_text, json[QString("creditsText")]);
    m_credits_text_isSet = !json[QString("creditsText")].isNull() && m_credits_text_isValid;

    m_cuisines_isValid = ::OpenAPI::fromJsonValue(cuisines, json[QString("cuisines")]);
    m_cuisines_isSet = !json[QString("cuisines")].isNull() && m_cuisines_isValid;

    m_dairy_free_isValid = ::OpenAPI::fromJsonValue(dairy_free, json[QString("dairyFree")]);
    m_dairy_free_isSet = !json[QString("dairyFree")].isNull() && m_dairy_free_isValid;

    m_diets_isValid = ::OpenAPI::fromJsonValue(diets, json[QString("diets")]);
    m_diets_isSet = !json[QString("diets")].isNull() && m_diets_isValid;

    m_gaps_isValid = ::OpenAPI::fromJsonValue(gaps, json[QString("gaps")]);
    m_gaps_isSet = !json[QString("gaps")].isNull() && m_gaps_isValid;

    m_gluten_free_isValid = ::OpenAPI::fromJsonValue(gluten_free, json[QString("glutenFree")]);
    m_gluten_free_isSet = !json[QString("glutenFree")].isNull() && m_gluten_free_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;

    m_ketogenic_isValid = ::OpenAPI::fromJsonValue(ketogenic, json[QString("ketogenic")]);
    m_ketogenic_isSet = !json[QString("ketogenic")].isNull() && m_ketogenic_isValid;

    m_low_fodmap_isValid = ::OpenAPI::fromJsonValue(low_fodmap, json[QString("lowFodmap")]);
    m_low_fodmap_isSet = !json[QString("lowFodmap")].isNull() && m_low_fodmap_isValid;

    m_occasions_isValid = ::OpenAPI::fromJsonValue(occasions, json[QString("occasions")]);
    m_occasions_isSet = !json[QString("occasions")].isNull() && m_occasions_isValid;

    m_sustainable_isValid = ::OpenAPI::fromJsonValue(sustainable, json[QString("sustainable")]);
    m_sustainable_isSet = !json[QString("sustainable")].isNull() && m_sustainable_isValid;

    m_vegan_isValid = ::OpenAPI::fromJsonValue(vegan, json[QString("vegan")]);
    m_vegan_isSet = !json[QString("vegan")].isNull() && m_vegan_isValid;

    m_vegetarian_isValid = ::OpenAPI::fromJsonValue(vegetarian, json[QString("vegetarian")]);
    m_vegetarian_isSet = !json[QString("vegetarian")].isNull() && m_vegetarian_isValid;

    m_very_healthy_isValid = ::OpenAPI::fromJsonValue(very_healthy, json[QString("veryHealthy")]);
    m_very_healthy_isSet = !json[QString("veryHealthy")].isNull() && m_very_healthy_isValid;

    m_very_popular_isValid = ::OpenAPI::fromJsonValue(very_popular, json[QString("veryPopular")]);
    m_very_popular_isSet = !json[QString("veryPopular")].isNull() && m_very_popular_isValid;

    m_whole30_isValid = ::OpenAPI::fromJsonValue(whole30, json[QString("whole30")]);
    m_whole30_isSet = !json[QString("whole30")].isNull() && m_whole30_isValid;

    m_weight_watcher_smart_points_isValid = ::OpenAPI::fromJsonValue(weight_watcher_smart_points, json[QString("weightWatcherSmartPoints")]);
    m_weight_watcher_smart_points_isSet = !json[QString("weightWatcherSmartPoints")].isNull() && m_weight_watcher_smart_points_isValid;

    m_dish_types_isValid = ::OpenAPI::fromJsonValue(dish_types, json[QString("dishTypes")]);
    m_dish_types_isSet = !json[QString("dishTypes")].isNull() && m_dish_types_isValid;

    m_extended_ingredients_isValid = ::OpenAPI::fromJsonValue(extended_ingredients, json[QString("extendedIngredients")]);
    m_extended_ingredients_isSet = !json[QString("extendedIngredients")].isNull() && m_extended_ingredients_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_wine_pairing_isValid = ::OpenAPI::fromJsonValue(wine_pairing, json[QString("winePairing")]);
    m_wine_pairing_isSet = !json[QString("winePairing")].isNull() && m_wine_pairing_isValid;
}

QString OAIGetRecipeInformation_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRecipeInformation_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(title));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(image));
    }
    if (m_image_type_isSet) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(image_type));
    }
    if (m_servings_isSet) {
        obj.insert(QString("servings"), ::OpenAPI::toJsonValue(servings));
    }
    if (m_ready_in_minutes_isSet) {
        obj.insert(QString("readyInMinutes"), ::OpenAPI::toJsonValue(ready_in_minutes));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(license));
    }
    if (m_source_name_isSet) {
        obj.insert(QString("sourceName"), ::OpenAPI::toJsonValue(source_name));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("sourceUrl"), ::OpenAPI::toJsonValue(source_url));
    }
    if (m_spoonacular_source_url_isSet) {
        obj.insert(QString("spoonacularSourceUrl"), ::OpenAPI::toJsonValue(spoonacular_source_url));
    }
    if (m_aggregate_likes_isSet) {
        obj.insert(QString("aggregateLikes"), ::OpenAPI::toJsonValue(aggregate_likes));
    }
    if (m_health_score_isSet) {
        obj.insert(QString("healthScore"), ::OpenAPI::toJsonValue(health_score));
    }
    if (m_spoonacular_score_isSet) {
        obj.insert(QString("spoonacularScore"), ::OpenAPI::toJsonValue(spoonacular_score));
    }
    if (m_price_per_serving_isSet) {
        obj.insert(QString("pricePerServing"), ::OpenAPI::toJsonValue(price_per_serving));
    }
    if (analyzed_instructions.size() > 0) {
        obj.insert(QString("analyzedInstructions"), ::OpenAPI::toJsonValue(analyzed_instructions));
    }
    if (m_cheap_isSet) {
        obj.insert(QString("cheap"), ::OpenAPI::toJsonValue(cheap));
    }
    if (m_credits_text_isSet) {
        obj.insert(QString("creditsText"), ::OpenAPI::toJsonValue(credits_text));
    }
    if (cuisines.size() > 0) {
        obj.insert(QString("cuisines"), ::OpenAPI::toJsonValue(cuisines));
    }
    if (m_dairy_free_isSet) {
        obj.insert(QString("dairyFree"), ::OpenAPI::toJsonValue(dairy_free));
    }
    if (diets.size() > 0) {
        obj.insert(QString("diets"), ::OpenAPI::toJsonValue(diets));
    }
    if (m_gaps_isSet) {
        obj.insert(QString("gaps"), ::OpenAPI::toJsonValue(gaps));
    }
    if (m_gluten_free_isSet) {
        obj.insert(QString("glutenFree"), ::OpenAPI::toJsonValue(gluten_free));
    }
    if (m_instructions_isSet) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(instructions));
    }
    if (m_ketogenic_isSet) {
        obj.insert(QString("ketogenic"), ::OpenAPI::toJsonValue(ketogenic));
    }
    if (m_low_fodmap_isSet) {
        obj.insert(QString("lowFodmap"), ::OpenAPI::toJsonValue(low_fodmap));
    }
    if (occasions.size() > 0) {
        obj.insert(QString("occasions"), ::OpenAPI::toJsonValue(occasions));
    }
    if (m_sustainable_isSet) {
        obj.insert(QString("sustainable"), ::OpenAPI::toJsonValue(sustainable));
    }
    if (m_vegan_isSet) {
        obj.insert(QString("vegan"), ::OpenAPI::toJsonValue(vegan));
    }
    if (m_vegetarian_isSet) {
        obj.insert(QString("vegetarian"), ::OpenAPI::toJsonValue(vegetarian));
    }
    if (m_very_healthy_isSet) {
        obj.insert(QString("veryHealthy"), ::OpenAPI::toJsonValue(very_healthy));
    }
    if (m_very_popular_isSet) {
        obj.insert(QString("veryPopular"), ::OpenAPI::toJsonValue(very_popular));
    }
    if (m_whole30_isSet) {
        obj.insert(QString("whole30"), ::OpenAPI::toJsonValue(whole30));
    }
    if (m_weight_watcher_smart_points_isSet) {
        obj.insert(QString("weightWatcherSmartPoints"), ::OpenAPI::toJsonValue(weight_watcher_smart_points));
    }
    if (dish_types.size() > 0) {
        obj.insert(QString("dishTypes"), ::OpenAPI::toJsonValue(dish_types));
    }
    if (extended_ingredients.size() > 0) {
        obj.insert(QString("extendedIngredients"), ::OpenAPI::toJsonValue(extended_ingredients));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(summary));
    }
    if (wine_pairing.isSet()) {
        obj.insert(QString("winePairing"), ::OpenAPI::toJsonValue(wine_pairing));
    }
    return obj;
}

qint32 OAIGetRecipeInformation_200_response::getId() const {
    return id;
}
void OAIGetRecipeInformation_200_response::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetRecipeInformation_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetRecipeInformation_200_response::getTitle() const {
    return title;
}
void OAIGetRecipeInformation_200_response::setTitle(const QString &title) {
    this->title = title;
    this->m_title_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGetRecipeInformation_200_response::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGetRecipeInformation_200_response::getImage() const {
    return image;
}
void OAIGetRecipeInformation_200_response::setImage(const QString &image) {
    this->image = image;
    this->m_image_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_image_Set() const{
    return m_image_isSet;
}

bool OAIGetRecipeInformation_200_response::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIGetRecipeInformation_200_response::getImageType() const {
    return image_type;
}
void OAIGetRecipeInformation_200_response::setImageType(const QString &image_type) {
    this->image_type = image_type;
    this->m_image_type_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAIGetRecipeInformation_200_response::is_image_type_Valid() const{
    return m_image_type_isValid;
}

double OAIGetRecipeInformation_200_response::getServings() const {
    return servings;
}
void OAIGetRecipeInformation_200_response::setServings(const double &servings) {
    this->servings = servings;
    this->m_servings_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_servings_Set() const{
    return m_servings_isSet;
}

bool OAIGetRecipeInformation_200_response::is_servings_Valid() const{
    return m_servings_isValid;
}

qint32 OAIGetRecipeInformation_200_response::getReadyInMinutes() const {
    return ready_in_minutes;
}
void OAIGetRecipeInformation_200_response::setReadyInMinutes(const qint32 &ready_in_minutes) {
    this->ready_in_minutes = ready_in_minutes;
    this->m_ready_in_minutes_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_ready_in_minutes_Set() const{
    return m_ready_in_minutes_isSet;
}

bool OAIGetRecipeInformation_200_response::is_ready_in_minutes_Valid() const{
    return m_ready_in_minutes_isValid;
}

QString OAIGetRecipeInformation_200_response::getLicense() const {
    return license;
}
void OAIGetRecipeInformation_200_response::setLicense(const QString &license) {
    this->license = license;
    this->m_license_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_license_Set() const{
    return m_license_isSet;
}

bool OAIGetRecipeInformation_200_response::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIGetRecipeInformation_200_response::getSourceName() const {
    return source_name;
}
void OAIGetRecipeInformation_200_response::setSourceName(const QString &source_name) {
    this->source_name = source_name;
    this->m_source_name_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_source_name_Set() const{
    return m_source_name_isSet;
}

bool OAIGetRecipeInformation_200_response::is_source_name_Valid() const{
    return m_source_name_isValid;
}

QString OAIGetRecipeInformation_200_response::getSourceUrl() const {
    return source_url;
}
void OAIGetRecipeInformation_200_response::setSourceUrl(const QString &source_url) {
    this->source_url = source_url;
    this->m_source_url_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIGetRecipeInformation_200_response::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QString OAIGetRecipeInformation_200_response::getSpoonacularSourceUrl() const {
    return spoonacular_source_url;
}
void OAIGetRecipeInformation_200_response::setSpoonacularSourceUrl(const QString &spoonacular_source_url) {
    this->spoonacular_source_url = spoonacular_source_url;
    this->m_spoonacular_source_url_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_spoonacular_source_url_Set() const{
    return m_spoonacular_source_url_isSet;
}

bool OAIGetRecipeInformation_200_response::is_spoonacular_source_url_Valid() const{
    return m_spoonacular_source_url_isValid;
}

qint32 OAIGetRecipeInformation_200_response::getAggregateLikes() const {
    return aggregate_likes;
}
void OAIGetRecipeInformation_200_response::setAggregateLikes(const qint32 &aggregate_likes) {
    this->aggregate_likes = aggregate_likes;
    this->m_aggregate_likes_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_aggregate_likes_Set() const{
    return m_aggregate_likes_isSet;
}

bool OAIGetRecipeInformation_200_response::is_aggregate_likes_Valid() const{
    return m_aggregate_likes_isValid;
}

double OAIGetRecipeInformation_200_response::getHealthScore() const {
    return health_score;
}
void OAIGetRecipeInformation_200_response::setHealthScore(const double &health_score) {
    this->health_score = health_score;
    this->m_health_score_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_health_score_Set() const{
    return m_health_score_isSet;
}

bool OAIGetRecipeInformation_200_response::is_health_score_Valid() const{
    return m_health_score_isValid;
}

double OAIGetRecipeInformation_200_response::getSpoonacularScore() const {
    return spoonacular_score;
}
void OAIGetRecipeInformation_200_response::setSpoonacularScore(const double &spoonacular_score) {
    this->spoonacular_score = spoonacular_score;
    this->m_spoonacular_score_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_spoonacular_score_Set() const{
    return m_spoonacular_score_isSet;
}

bool OAIGetRecipeInformation_200_response::is_spoonacular_score_Valid() const{
    return m_spoonacular_score_isValid;
}

double OAIGetRecipeInformation_200_response::getPricePerServing() const {
    return price_per_serving;
}
void OAIGetRecipeInformation_200_response::setPricePerServing(const double &price_per_serving) {
    this->price_per_serving = price_per_serving;
    this->m_price_per_serving_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_price_per_serving_Set() const{
    return m_price_per_serving_isSet;
}

bool OAIGetRecipeInformation_200_response::is_price_per_serving_Valid() const{
    return m_price_per_serving_isValid;
}

QList<OAIObject> OAIGetRecipeInformation_200_response::getAnalyzedInstructions() const {
    return analyzed_instructions;
}
void OAIGetRecipeInformation_200_response::setAnalyzedInstructions(const QList<OAIObject> &analyzed_instructions) {
    this->analyzed_instructions = analyzed_instructions;
    this->m_analyzed_instructions_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_analyzed_instructions_Set() const{
    return m_analyzed_instructions_isSet;
}

bool OAIGetRecipeInformation_200_response::is_analyzed_instructions_Valid() const{
    return m_analyzed_instructions_isValid;
}

bool OAIGetRecipeInformation_200_response::isCheap() const {
    return cheap;
}
void OAIGetRecipeInformation_200_response::setCheap(const bool &cheap) {
    this->cheap = cheap;
    this->m_cheap_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_cheap_Set() const{
    return m_cheap_isSet;
}

bool OAIGetRecipeInformation_200_response::is_cheap_Valid() const{
    return m_cheap_isValid;
}

QString OAIGetRecipeInformation_200_response::getCreditsText() const {
    return credits_text;
}
void OAIGetRecipeInformation_200_response::setCreditsText(const QString &credits_text) {
    this->credits_text = credits_text;
    this->m_credits_text_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_credits_text_Set() const{
    return m_credits_text_isSet;
}

bool OAIGetRecipeInformation_200_response::is_credits_text_Valid() const{
    return m_credits_text_isValid;
}

QList<QString> OAIGetRecipeInformation_200_response::getCuisines() const {
    return cuisines;
}
void OAIGetRecipeInformation_200_response::setCuisines(const QList<QString> &cuisines) {
    this->cuisines = cuisines;
    this->m_cuisines_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_cuisines_Set() const{
    return m_cuisines_isSet;
}

bool OAIGetRecipeInformation_200_response::is_cuisines_Valid() const{
    return m_cuisines_isValid;
}

bool OAIGetRecipeInformation_200_response::isDairyFree() const {
    return dairy_free;
}
void OAIGetRecipeInformation_200_response::setDairyFree(const bool &dairy_free) {
    this->dairy_free = dairy_free;
    this->m_dairy_free_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_dairy_free_Set() const{
    return m_dairy_free_isSet;
}

bool OAIGetRecipeInformation_200_response::is_dairy_free_Valid() const{
    return m_dairy_free_isValid;
}

QList<QString> OAIGetRecipeInformation_200_response::getDiets() const {
    return diets;
}
void OAIGetRecipeInformation_200_response::setDiets(const QList<QString> &diets) {
    this->diets = diets;
    this->m_diets_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_diets_Set() const{
    return m_diets_isSet;
}

bool OAIGetRecipeInformation_200_response::is_diets_Valid() const{
    return m_diets_isValid;
}

QString OAIGetRecipeInformation_200_response::getGaps() const {
    return gaps;
}
void OAIGetRecipeInformation_200_response::setGaps(const QString &gaps) {
    this->gaps = gaps;
    this->m_gaps_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_gaps_Set() const{
    return m_gaps_isSet;
}

bool OAIGetRecipeInformation_200_response::is_gaps_Valid() const{
    return m_gaps_isValid;
}

bool OAIGetRecipeInformation_200_response::isGlutenFree() const {
    return gluten_free;
}
void OAIGetRecipeInformation_200_response::setGlutenFree(const bool &gluten_free) {
    this->gluten_free = gluten_free;
    this->m_gluten_free_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_gluten_free_Set() const{
    return m_gluten_free_isSet;
}

bool OAIGetRecipeInformation_200_response::is_gluten_free_Valid() const{
    return m_gluten_free_isValid;
}

QString OAIGetRecipeInformation_200_response::getInstructions() const {
    return instructions;
}
void OAIGetRecipeInformation_200_response::setInstructions(const QString &instructions) {
    this->instructions = instructions;
    this->m_instructions_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAIGetRecipeInformation_200_response::is_instructions_Valid() const{
    return m_instructions_isValid;
}

bool OAIGetRecipeInformation_200_response::isKetogenic() const {
    return ketogenic;
}
void OAIGetRecipeInformation_200_response::setKetogenic(const bool &ketogenic) {
    this->ketogenic = ketogenic;
    this->m_ketogenic_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_ketogenic_Set() const{
    return m_ketogenic_isSet;
}

bool OAIGetRecipeInformation_200_response::is_ketogenic_Valid() const{
    return m_ketogenic_isValid;
}

bool OAIGetRecipeInformation_200_response::isLowFodmap() const {
    return low_fodmap;
}
void OAIGetRecipeInformation_200_response::setLowFodmap(const bool &low_fodmap) {
    this->low_fodmap = low_fodmap;
    this->m_low_fodmap_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_low_fodmap_Set() const{
    return m_low_fodmap_isSet;
}

bool OAIGetRecipeInformation_200_response::is_low_fodmap_Valid() const{
    return m_low_fodmap_isValid;
}

QList<QString> OAIGetRecipeInformation_200_response::getOccasions() const {
    return occasions;
}
void OAIGetRecipeInformation_200_response::setOccasions(const QList<QString> &occasions) {
    this->occasions = occasions;
    this->m_occasions_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_occasions_Set() const{
    return m_occasions_isSet;
}

bool OAIGetRecipeInformation_200_response::is_occasions_Valid() const{
    return m_occasions_isValid;
}

bool OAIGetRecipeInformation_200_response::isSustainable() const {
    return sustainable;
}
void OAIGetRecipeInformation_200_response::setSustainable(const bool &sustainable) {
    this->sustainable = sustainable;
    this->m_sustainable_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_sustainable_Set() const{
    return m_sustainable_isSet;
}

bool OAIGetRecipeInformation_200_response::is_sustainable_Valid() const{
    return m_sustainable_isValid;
}

bool OAIGetRecipeInformation_200_response::isVegan() const {
    return vegan;
}
void OAIGetRecipeInformation_200_response::setVegan(const bool &vegan) {
    this->vegan = vegan;
    this->m_vegan_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_vegan_Set() const{
    return m_vegan_isSet;
}

bool OAIGetRecipeInformation_200_response::is_vegan_Valid() const{
    return m_vegan_isValid;
}

bool OAIGetRecipeInformation_200_response::isVegetarian() const {
    return vegetarian;
}
void OAIGetRecipeInformation_200_response::setVegetarian(const bool &vegetarian) {
    this->vegetarian = vegetarian;
    this->m_vegetarian_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_vegetarian_Set() const{
    return m_vegetarian_isSet;
}

bool OAIGetRecipeInformation_200_response::is_vegetarian_Valid() const{
    return m_vegetarian_isValid;
}

bool OAIGetRecipeInformation_200_response::isVeryHealthy() const {
    return very_healthy;
}
void OAIGetRecipeInformation_200_response::setVeryHealthy(const bool &very_healthy) {
    this->very_healthy = very_healthy;
    this->m_very_healthy_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_very_healthy_Set() const{
    return m_very_healthy_isSet;
}

bool OAIGetRecipeInformation_200_response::is_very_healthy_Valid() const{
    return m_very_healthy_isValid;
}

bool OAIGetRecipeInformation_200_response::isVeryPopular() const {
    return very_popular;
}
void OAIGetRecipeInformation_200_response::setVeryPopular(const bool &very_popular) {
    this->very_popular = very_popular;
    this->m_very_popular_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_very_popular_Set() const{
    return m_very_popular_isSet;
}

bool OAIGetRecipeInformation_200_response::is_very_popular_Valid() const{
    return m_very_popular_isValid;
}

bool OAIGetRecipeInformation_200_response::isWhole30() const {
    return whole30;
}
void OAIGetRecipeInformation_200_response::setWhole30(const bool &whole30) {
    this->whole30 = whole30;
    this->m_whole30_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_whole30_Set() const{
    return m_whole30_isSet;
}

bool OAIGetRecipeInformation_200_response::is_whole30_Valid() const{
    return m_whole30_isValid;
}

double OAIGetRecipeInformation_200_response::getWeightWatcherSmartPoints() const {
    return weight_watcher_smart_points;
}
void OAIGetRecipeInformation_200_response::setWeightWatcherSmartPoints(const double &weight_watcher_smart_points) {
    this->weight_watcher_smart_points = weight_watcher_smart_points;
    this->m_weight_watcher_smart_points_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_weight_watcher_smart_points_Set() const{
    return m_weight_watcher_smart_points_isSet;
}

bool OAIGetRecipeInformation_200_response::is_weight_watcher_smart_points_Valid() const{
    return m_weight_watcher_smart_points_isValid;
}

QList<QString> OAIGetRecipeInformation_200_response::getDishTypes() const {
    return dish_types;
}
void OAIGetRecipeInformation_200_response::setDishTypes(const QList<QString> &dish_types) {
    this->dish_types = dish_types;
    this->m_dish_types_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_dish_types_Set() const{
    return m_dish_types_isSet;
}

bool OAIGetRecipeInformation_200_response::is_dish_types_Valid() const{
    return m_dish_types_isValid;
}

QSet<OAIGetRecipeInformation_200_response_extendedIngredients_inner> OAIGetRecipeInformation_200_response::getExtendedIngredients() const {
    return extended_ingredients;
}
void OAIGetRecipeInformation_200_response::setExtendedIngredients(const QSet<OAIGetRecipeInformation_200_response_extendedIngredients_inner> &extended_ingredients) {
    this->extended_ingredients = extended_ingredients;
    this->m_extended_ingredients_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_extended_ingredients_Set() const{
    return m_extended_ingredients_isSet;
}

bool OAIGetRecipeInformation_200_response::is_extended_ingredients_Valid() const{
    return m_extended_ingredients_isValid;
}

QString OAIGetRecipeInformation_200_response::getSummary() const {
    return summary;
}
void OAIGetRecipeInformation_200_response::setSummary(const QString &summary) {
    this->summary = summary;
    this->m_summary_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIGetRecipeInformation_200_response::is_summary_Valid() const{
    return m_summary_isValid;
}

OAIGetRecipeInformation_200_response_winePairing OAIGetRecipeInformation_200_response::getWinePairing() const {
    return wine_pairing;
}
void OAIGetRecipeInformation_200_response::setWinePairing(const OAIGetRecipeInformation_200_response_winePairing &wine_pairing) {
    this->wine_pairing = wine_pairing;
    this->m_wine_pairing_isSet = true;
}

bool OAIGetRecipeInformation_200_response::is_wine_pairing_Set() const{
    return m_wine_pairing_isSet;
}

bool OAIGetRecipeInformation_200_response::is_wine_pairing_Valid() const{
    return m_wine_pairing_isValid;
}

bool OAIGetRecipeInformation_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_servings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ready_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoonacular_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregate_likes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoonacular_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_per_serving_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (analyzed_instructions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cheap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (cuisines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dairy_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (diets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gaps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gluten_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ketogenic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_fodmap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (occasions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sustainable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vegan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vegetarian_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_very_healthy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_very_popular_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_whole30_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_watcher_smart_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (dish_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (extended_ingredients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (wine_pairing.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRecipeInformation_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_title_isValid && m_image_isValid && m_image_type_isValid && m_servings_isValid && m_ready_in_minutes_isValid && m_license_isValid && m_source_name_isValid && m_source_url_isValid && m_spoonacular_source_url_isValid && m_aggregate_likes_isValid && m_health_score_isValid && m_spoonacular_score_isValid && m_price_per_serving_isValid && m_analyzed_instructions_isValid && m_cheap_isValid && m_credits_text_isValid && m_cuisines_isValid && m_dairy_free_isValid && m_diets_isValid && m_gaps_isValid && m_gluten_free_isValid && m_instructions_isValid && m_ketogenic_isValid && m_low_fodmap_isValid && m_occasions_isValid && m_sustainable_isValid && m_vegan_isValid && m_vegetarian_isValid && m_very_healthy_isValid && m_very_popular_isValid && m_whole30_isValid && m_weight_watcher_smart_points_isValid && m_dish_types_isValid && m_extended_ingredients_isValid && m_summary_isValid && m_wine_pairing_isValid && true;
}

} // namespace OpenAPI
