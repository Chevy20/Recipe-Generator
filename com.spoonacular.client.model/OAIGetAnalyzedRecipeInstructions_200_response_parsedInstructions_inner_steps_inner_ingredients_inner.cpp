/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner() {
    this->initializeModel();
}

OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::~OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner() {}

void OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_localized_name_isSet = false;
    m_localized_name_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;
}

void OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_localized_name_isValid = ::OpenAPI::fromJsonValue(localized_name, json[QString("localizedName")]);
    m_localized_name_isSet = !json[QString("localizedName")].isNull() && m_localized_name_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;
}

QString OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_localized_name_isSet) {
        obj.insert(QString("localizedName"), ::OpenAPI::toJsonValue(localized_name));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(image));
    }
    return obj;
}

qint32 OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::getId() const {
    return id;
}
void OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::getName() const {
    return name;
}
void OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::getLocalizedName() const {
    return localized_name;
}
void OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::setLocalizedName(const QString &localized_name) {
    this->localized_name = localized_name;
    this->m_localized_name_isSet = true;
}

bool OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::is_localized_name_Set() const{
    return m_localized_name_isSet;
}

bool OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::is_localized_name_Valid() const{
    return m_localized_name_isValid;
}

QString OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::getImage() const {
    return image;
}
void OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::setImage(const QString &image) {
    this->image = image;
    this->m_image_isSet = true;
}

bool OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::is_image_Set() const{
    return m_image_isSet;
}

bool OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::is_image_Valid() const{
    return m_image_isValid;
}

bool OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAnalyzedRecipeInstructions_200_response_parsedInstructions_inner_steps_inner_ingredients_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_localized_name_isValid && m_image_isValid && true;
}

} // namespace OpenAPI
